import{_ as p,W as o,X as c,Y as s,Z as n,$ as e,a0 as t,C as l}from"./framework-c8ebc670.js";const r={},i=s("h1",{id:"type-assertion",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#type-assertion","aria-hidden":"true"},"#"),n(" Type Assertion")],-1),d=s("h2",{id:"定义",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#定义","aria-hidden":"true"},"#"),n(" 定义")],-1),u={href:"https://roadmap.sh/typescript",target:"_blank",rel:"noopener noreferrer"},k=t(`<ul><li><p>开发者可能比 TypeScript 编译器更清楚某个值的类型（例如编译器推断出的值类型是 <code>any</code>，但开发者清楚值类型应该是 <code>string</code>），那么可以使用类型断言（type assertion）告诉编译器正确的值类型。</p></li><li><p>例子如下，编译器推断出 <code>JSON.parse</code> 返回的值类型是 <code>any</code>，但是开发者知道 <code>rawData</code> 经过 <code>JSON.parse</code> 转换后的值类型应该是 <code>string[]</code>，那么就可以使用断言告诉 TypeScript 编译器正确的值类型。</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> rawData <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[&#39;Jeff&#39;, &#39;Grace&#39;]</span><span class="token template-punctuation string">\`</span></span>

<span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token comment">// any</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// string[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h2>`,3),m={href:"https://roadmap.sh/typescript",target:"_blank",rel:"noopener noreferrer"},y=t(`<ul><li>尖括号语法</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> rawData <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[&#39;Jeff&#39;, &#39;Grace&#39;]</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token comment">// any</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token comment">// string[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>as</code> 语法</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> rawData <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[&#39;Jeff&#39;, &#39;Grace&#39;]</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token comment">// any</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// string[]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="as-const" tabindex="-1"><a class="header-anchor" href="#as-const" aria-hidden="true">#</a> as const</h2>`,5),v={href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions",target:"_blank",rel:"noopener noreferrer"},h=t(`<ul><li><p><code>const</code> 断言的效果：</p><ul><li>类型变成字面量类型。</li><li>对象的属性变成 <code>readonly</code>。</li><li>数组变成 <code>readonly</code> 元组。</li></ul></li><li><p>类型变成字面量类型：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token comment">// string</span>
<span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token keyword">as</span> <span class="token keyword">const</span> <span class="token comment">// &#39;hello&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对象的属性变成 <code>readonly</code>：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Jeff&#39;</span> <span class="token punctuation">}</span> <span class="token comment">// {name: string}</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Jeff&#39;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span> <span class="token comment">// {readonly name: &#39;Jeff&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数组变成 <code>readonly</code> 元组：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> person1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;Jeff&#39;</span><span class="token punctuation">]</span> <span class="token comment">// (string | number)[]</span>
<span class="token keyword">let</span> person2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;Jeff&#39;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span> <span class="token comment">// [18, &#39;Jeff&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="as-type" tabindex="-1"><a class="header-anchor" href="#as-type" aria-hidden="true">#</a> as [type]</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> age1 <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">let</span> age2 <span class="token operator">=</span> <span class="token number">18</span> <span class="token keyword">as</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="as-any" tabindex="-1"><a class="header-anchor" href="#as-any" aria-hidden="true">#</a> as any</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">21</span> <span class="token keyword">as</span> <span class="token builtin">any</span> <span class="token comment">// any</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="non-null-assertion" tabindex="-1"><a class="header-anchor" href="#non-null-assertion" aria-hidden="true">#</a> non-null assertion</h2>`,11),g={href:"https://roadmap.sh/typescript",target:"_blank",rel:"noopener noreferrer"},b=t(`<ul><li><p>非空断言（non-null assertion）操作符（!）告诉编译器值类型不是 <code>null</code> 或 <code>undefined</code>。</p></li><li><p>如下面代码所示，使用非空断言操作符之后，编译器不会将 <code>firstname</code> 的类型推断为 <code>null</code>，所以调用 <code>toUpperCase</code> 不会报错。</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> firstname<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
firstname<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function f(w,_){const a=l("ExternalLinkIcon");return o(),c("div",null,[i,d,s("blockquote",null,[s("p",null,[n("Reference: "),s("a",u,[n("TypeScript Roadmap"),e(a)])])]),k,s("blockquote",null,[s("p",null,[n("Reference: "),s("a",m,[n("TypeScript Roadmap"),e(a)])])]),y,s("blockquote",null,[s("p",null,[n("Reference: "),s("a",v,[n("TypeScript Docs: const assertion"),e(a)])])]),h,s("blockquote",null,[s("p",null,[n("Reference: "),s("a",g,[n("TypeScript Roadmap"),e(a)])])]),b])}const J=p(r,[["render",f],["__file","type-assertion.html.vue"]]);export{J as default};
