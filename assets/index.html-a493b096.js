import{_ as t,W as i,X as o,Y as a,Z as n,$ as s,a0 as l,C as p}from"./framework-0d71bc9d.js";const r="/blog/assets/set_step_1-3dd47b7b.png",c="/blog/assets/set_step_2-d7c969cf.png",d="/blog/assets/map_step_1-11f4bb2a.png",u={},k=l(`<h1 id="set-and-weakset" tabindex="-1"><a class="header-anchor" href="#set-and-weakset" aria-hidden="true">#</a> Set and WeakSet</h1><h2 id="解决的问题" tabindex="-1"><a class="header-anchor" href="#解决的问题" aria-hidden="true">#</a> 解决的问题</h2><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3><ul><li>保存唯一的值</li></ul><h3 id="weakset" tabindex="-1"><a class="header-anchor" href="#weakset" aria-hidden="true">#</a> WeakSet</h3><ul><li>解决 Set 可能会导致内存泄露的问题</li></ul><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><h3 id="set-1" tabindex="-1"><a class="header-anchor" href="#set-1" aria-hidden="true">#</a> Set</h3><ul><li><p>Set 中的引用属于强引用</p></li><li><p>强引用 (strong reference) : 会影响到对象的可达性 (reachability)，即会阻止对象被垃圾回收器回收</p></li></ul><p><em>Example</em></p><ul><li>此时有两个强引用指向同一个对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> pointer <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pointer<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="step one" tabindex="0" loading="lazy"><figcaption>step one</figcaption></figure><ul><li>将 <code>pointer</code> 设置为 <code>null</code>，此时还有 <code>Set</code> 中的一个强引用，因此堆中的对象不会被垃圾回收器回收</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> pointer <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pointer<span class="token punctuation">]</span><span class="token punctuation">)</span>
pointer <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="step two" tabindex="0" loading="lazy"><figcaption>step two</figcaption></figure><h3 id="weakset-1" tabindex="-1"><a class="header-anchor" href="#weakset-1" aria-hidden="true">#</a> WeakSet</h3><ul><li><p>WeakSet 中的引用属于弱引用</p></li><li><p>弱引用 (weak reference) : 不会影响对象的可达性，即不会阻止对象被垃圾回收器回收</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> pointer <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pointer<span class="token punctuation">]</span><span class="token punctuation">)</span>
pointer <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>pointer</code> 设置为 <code>null</code> 后，由于 WeakSet 中的引用是弱引用，所以堆中的对象此时是不可达的，因此会被垃圾回收器回收</li></ul><figure><img src="`+d+'" alt="map set one" tabindex="0" loading="lazy"><figcaption>map set one</figcaption></figure><h2 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> Refs</h2>',22),h={href:"https://javascript.info/garbage-collection",target:"_blank",rel:"noopener noreferrer"},g={href:"https://elliotchance.medium.com/strong-vs-weak-references-70356d37dfd2",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const e=p("ExternalLinkIcon");return i(),o("div",null,[k,a("ul",null,[a("li",null,[a("a",h,[n("Garbage Collection"),s(e)])]),a("li",null,[a("a",g,[n("Strong and Weak Reference"),s(e)])])])])}const _=t(u,[["render",m],["__file","index.html.vue"]]);export{_ as default};
