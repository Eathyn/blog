import{_ as t,W as o,X as c,Y as n,Z as a,$ as e,a0 as p,C as i}from"./framework-c8ebc670.js";const l={},u=p(`<h1 id="event-loop" tabindex="-1"><a class="header-anchor" href="#event-loop" aria-hidden="true">#</a> Event Loop</h1><h2 id="concept" tabindex="-1"><a class="header-anchor" href="#concept" aria-hidden="true">#</a> Concept</h2><ul><li><p>macrotask / task:</p><ul><li>script</li><li>timer: setTimeout / setInterval / setImmediate</li><li>requestAnimationFrame</li><li>I/O</li><li>UI Rendering</li></ul></li><li><p>microtask / job:</p><ul><li>promise</li><li>await</li><li>process.nextTick</li><li>MutationObserver</li><li>queueMicrotask</li></ul></li><li><p>task queue: a queue to store macrotask/task</p></li><li><p>job queue: a queue to store microtask/job</p></li></ul><h2 id="event-loop-process" tabindex="-1"><a class="header-anchor" href="#event-loop-process" aria-hidden="true">#</a> Event Loop Process</h2><ol><li>Run a macrotask. Enqueue macrotasks to task queue. Enqueue microtasks to job queue.</li><li>Run all microtasks in job queue if JS stack is idle.</li><li>Rerender UI</li><li>Queue a macrotask and run a macrotask. (go to step 1)</li></ol><h2 id="other" tabindex="-1"><a class="header-anchor" href="#other" aria-hidden="true">#</a> Other</h2><ul><li>UI 渲染和执行任务不会同时进行</li><li>倒计时结束后 setTimeout 的回调函数才会进入 macrotask queue。同样的，Promise 的状态从 pending 转变为 fulfilled 或 rejected 后，then 或 catch 的回调函数才会进入 microtask queue。代码如下：</li><li>microtasks can enqueue new microtasks and those new microtasks will execute before the next task begins to run, and before the end of the current event loop iteration.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 打印结果：start, microtask-1, microtask-2, macrotask, microtask-3, microtask-4</span>
<span class="token comment">// 注意：microtask-3, microtask-4 在 macrotask 之后</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>

Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;microtask-1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;microtask-2&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// 2000ms 后返回响应</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3001/&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;microtask-3&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;microtask-4&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;macrotask&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> Refs</h2>`,9),r={href:"https://javascript.info/event-loop",target:"_blank",rel:"noopener noreferrer"},k={href:"https://javascript.info/microtask-queue",target:"_blank",rel:"noopener noreferrer"},d={href:"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://medium.com/front-end-weekly/javascript-event-loop-explained-4cd26af121d4",target:"_blank",rel:"noopener noreferrer"},v={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide",target:"_blank",rel:"noopener noreferrer"};function f(b,_){const s=i("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[a("Modern JavaScript: Event Loop and Macrotask"),e(s)])]),n("li",null,[n("a",k,[a("Modern JavaScript: Microtask"),e(s)])]),n("li",null,[n("a",d,[a("Event Loop and Microtasks"),e(s)])]),n("li",null,[n("a",m,[a("Event Loop"),e(s)])]),n("li",null,[n("a",v,[a("Event Loop: Stack, Heap and Message Queue"),e(s)])]),n("li",null,[n("a",h,[a("Microtask Guide"),e(s)])])])])}const x=t(l,[["render",f],["__file","index.html.vue"]]);export{x as default};
