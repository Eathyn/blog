import{_ as d,W as n,X as a,Y as e,Z as o,$ as c,a0 as s,C as t}from"./framework-0d71bc9d.js";const r={},i=e("h1",{id:"filter-data",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#filter-data","aria-hidden":"true"},"#"),o(" Filter Data")],-1),p=e("h2",{id:"where",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#where","aria-hidden":"true"},"#"),o(" Where")],-1),u={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-where/",target:"_blank",rel:"noopener noreferrer"},h=s(`<ul><li><p><code>WHERE</code>：过滤出满足查找条件的行。</p></li><li><p>语法：</p></li></ul><div class="language-plsql line-numbers-mode" data-ext="plsql"><pre class="language-plsql"><code><span class="token keyword">SELECT</span> select_list
<span class="token keyword">FROM</span> table_name
<span class="token keyword">WHERE</span> condition
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sort_expression
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>操作符： <ul><li>比较：<code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=,</code> <code>&lt;&gt;</code></li><li>逻辑：<code>AND</code>, <code>OR</code></li><li>其他：<code>IN</code>, <code>BETWEEN</code>, <code>LIKE</code>, <code>IS NULL</code>, <code>NOT</code></li></ul></li></ul><h2 id="limit" tabindex="-1"><a class="header-anchor" href="#limit" aria-hidden="true">#</a> Limit</h2>`,4),_={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-limit/",target:"_blank",rel:"noopener noreferrer"},k=s(`<ul><li><p><code>LIMIT row_count</code>：只查找 <code>row_count</code> 行。</p></li><li><p><code>OFFSET row_count</code>：跳过 <code>row_count</code> 行再进行查找。</p></li><li><p>语法：</p></li></ul><div class="language-plsql line-numbers-mode" data-ext="plsql"><pre class="language-plsql"><code><span class="token keyword">SELECT</span> select_list 
<span class="token keyword">FROM</span> table_name
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sort_expression
<span class="token keyword">LIMIT</span> row_count OFFSET row_count
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fetch" tabindex="-1"><a class="header-anchor" href="#fetch" aria-hidden="true">#</a> Fetch</h2>`,3),w={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-fetch/",target:"_blank",rel:"noopener noreferrer"},E=s(`<ul><li><p><code>Fetch</code> 和 <code>Limit</code> 的功能相同，区别是 <code>Fetch</code> 是标准的 SQL 而 <code>Limit</code> 不是。</p></li><li><p>语法：</p></li></ul><div class="language-plsql line-numbers-mode" data-ext="plsql"><pre class="language-plsql"><code><span class="token keyword">FETCH</span> { <span class="token keyword">FIRST</span> | NEXT } <span class="token punctuation">[</span> row_count <span class="token punctuation">]</span> { <span class="token keyword">ROW</span> | ROWS } <span class="token keyword">ONLY</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>FIRST</code> 和 <code>NEXT</code> 作用相同；<code>ROW</code> 和 <code>ROWS</code> 作用相同。</p></li><li><p><code>OFFSET</code> 和 <code>FETCH</code> 可以出现在任何位置，但是 <code>OFFSET</code> 必须在 <code>FETCH</code> 之前。</p></li></ul><h2 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> IN</h2>`,4),m={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-in/",target:"_blank",rel:"noopener noreferrer"},b=s('<ul><li><code>IN</code> 搭配 <code>WHERE</code> 使用，<code>value IN (value1, value2, ...)</code> 表示 <code>value</code> 是否在后面的列表中。</li><li><code>NOT IN</code> 的作用与 <code>IN</code> 相反。</li></ul><h2 id="between" tabindex="-1"><a class="header-anchor" href="#between" aria-hidden="true">#</a> Between</h2>',2),g={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-between/",target:"_blank",rel:"noopener noreferrer"},f=s('<ul><li><p><code>BETWEEN</code> 搭配 <code>WHERE</code> 使用，用于检测值是否在某个范围之内。</p></li><li><p><code>NOT BETWEEN</code> 搭配 <code>WHERE</code> 使用，用于检测值是否不在某个范围之内。</p></li></ul><h2 id="like" tabindex="-1"><a class="header-anchor" href="#like" aria-hidden="true">#</a> LIKE</h2>',2),v={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-like/",target:"_blank",rel:"noopener noreferrer"},q=s("<ul><li><p><code>LIKE</code> 是模式匹配。</p></li><li><p><code>%</code>：匹配零个或多个任意字符。<code>Jar%</code> 匹配以 <code>Jar</code> 开头的字符串，后面有零个或多个字符。</p></li><li><p><code>_</code>：匹配一个任意字符。<code>Juli_</code> 匹配以 <code>Juli</code> 开头的字符串，后面有一个字符。</p></li><li><p><code>NOT LIKE</code> 是不匹配某个格式。</p></li><li><p><code>ILIKE</code>：在 <code>LIKE</code> 的基础上，忽略字母的大小写。</p></li></ul>",1);function R(I,N){const l=t("ExternalLinkIcon");return n(),a("div",null,[i,p,e("blockquote",null,[e("p",null,[o("Reference: "),e("a",u,[o("Where clause"),c(l)])])]),h,e("blockquote",null,[e("p",null,[o("Reference: "),e("a",_,[o("Limit clause"),c(l)])])]),k,e("blockquote",null,[e("p",null,[o("Reference: "),e("a",w,[o("Fetch"),c(l)])])]),E,e("blockquote",null,[e("p",null,[o("Reference: "),e("a",m,[o("IN"),c(l)])])]),b,e("blockquote",null,[e("p",null,[o("Reference: "),e("a",g,[o("Between"),c(l)])])]),f,e("blockquote",null,[e("p",null,[o("Reference: "),e("a",v,[o("Like"),c(l)])])]),q])}const L=d(r,[["render",R],["__file","index.html.vue"]]);export{L as default};
