import{_ as d,W as a,X as n,Y as e,$ as i,a0 as l,C as c}from"./framework-c8ebc670.js";const t="/blog/assets/array_as_heap-5dcfd360.png",h={},r=l('<h1 id="priority-queue" tabindex="-1"><a class="header-anchor" href="#priority-queue" aria-hidden="true">#</a> Priority Queue</h1><h2 id="优先队列的特点" tabindex="-1"><a class="header-anchor" href="#优先队列的特点" aria-hidden="true">#</a> 优先队列的特点</h2><blockquote><p>Book: A Common-Sense Guide to DSA: p279</p></blockquote><ul><li>优先队列的删除和访问操作和队列相同。</li><li>优先队列的插入操作和有序数组相同。</li></ul><h2 id="使用数组实现优先队列的缺点" tabindex="-1"><a class="header-anchor" href="#使用数组实现优先队列的缺点" aria-hidden="true">#</a> 使用数组实现优先队列的缺点</h2><blockquote><p>Book: A Common-Sense Guide to DSA: p281</p></blockquote><ul><li>插入操作的时间复杂度为 <code>O(N)</code>，因为需要移动元素。</li></ul><h2 id="关于二叉堆" tabindex="-1"><a class="header-anchor" href="#关于二叉堆" aria-hidden="true">#</a> 关于二叉堆</h2><blockquote><p>Book: A Common-Sense Guide to DSA: p281</p></blockquote>',9),u=e("li",null,[e("p",null,"二叉堆（binary heap）是一种特殊的二叉树。")],-1),s=e("p",null,"二叉堆分为两种：",-1),p=e("ul",null,[e("li",null,"大根堆（max-heap）：每个节点的值都比它的子孙节点的值大。")],-1),m=e("ul",null,[e("li",null,"小根堆（min-heap）：每个节点的值都比它的子孙节点的值小。")],-1),k=e("li",null,[e("p",null,"二叉堆的特点："),e("ul",null,[e("li",null,"每个节点的值都比它的子孙节点的值大，这个规则称为堆条件（heap condition）。"),e("li",null,"树必须是完整的。")])],-1),b=e("li",null,[e("p",null,"完整树的定义："),e("ul",null,[e("li",null,"除了最后一层，其他层没有空节点。"),e("li",null,"最后一层的节点尽可能往左靠。")])],-1),_=e("blockquote",null,[e("p",null,"Book: A Common-Sense Guide to DSA: p284")],-1),S=e("p",null,"堆的最后一个节点：堆的最低层的最右边的节点。",-1),x=l('<h2 id="二叉堆的插入操作" tabindex="-1"><a class="header-anchor" href="#二叉堆的插入操作" aria-hidden="true">#</a> 二叉堆的插入操作</h2><h3 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h3><blockquote><p>Book: A Common-Sense Guide to DSA: p285</p></blockquote><ol><li>生成新节点，让这个节点成为二叉堆的最后一个节点。</li><li>比较新节点和它的父节点，如果新节点的值比它的父节点的值大，则交换新节点和它的父节点。</li><li>重复第二步。</li></ol><h3 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h3><blockquote><p>A Common-Sense Guide to DSA: p287</p></blockquote><p>二叉树插入算法的时间复杂度为 <code>O(logN)</code>。主要执行的是插入算法第二步，因为对于 <code>N</code> 个节点来说，堆的高度为 <code>log(N)</code>。</p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><blockquote><p>Book: A Common-Sense Guide to DSA:</p></blockquote><h2 id="二叉堆的删除操作" tabindex="-1"><a class="header-anchor" href="#二叉堆的删除操作" aria-hidden="true">#</a> 二叉堆的删除操作</h2><h3 id="算法-1" tabindex="-1"><a class="header-anchor" href="#算法-1" aria-hidden="true">#</a> 算法</h3><blockquote><p>Book: A Common-Sense Guide to DSA: p288 - p290</p></blockquote><ol><li>堆的最后一个节点代替根节点作为新的根节点。</li><li>比较新的根节点的左右子节点，获取较大的子节点。新的根节点与值较大的子节点替换。</li><li>重复步骤二直到新的根节点的值比左右子节点都大。</li></ol><h3 id="时间复杂度-1" tabindex="-1"><a class="header-anchor" href="#时间复杂度-1" aria-hidden="true">#</a> 时间复杂度</h3><blockquote><p>Book: A Common-Sense Guide to DSA: p292</p></blockquote><p>二叉树删除算法的时间复杂度为 <code>O(logN)</code>。主要执行的是删除算法第二步，因为对于 <code>N</code> 个节点来说，堆的高度为 <code>log(N)</code>。</p><h3 id="实现-1" tabindex="-1"><a class="header-anchor" href="#实现-1" aria-hidden="true">#</a> 实现</h3><blockquote><p>Book: A Common-Sense Guide to DSA:</p></blockquote><h2 id="使用数组实现堆" tabindex="-1"><a class="header-anchor" href="#使用数组实现堆" aria-hidden="true">#</a> 使用数组实现堆</h2><blockquote><p>Book: A Common-Sense Guide to DSA: p295</p></blockquote><p>堆可以使用数组来实现，这种实现方式可以很快地找到堆的最后一个节点：</p><figure><img src="'+t+'" alt="数组实现堆" tabindex="0" loading="lazy"><figcaption>数组实现堆</figcaption></figure><h3 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h3><blockquote><p>Book: A Common-Sense Guide to DSA: p297, p298</p></blockquote><p>使用数组实现的堆不像树的数据结构一样通过内存地址找到左右子节点，但是可以通过以下的规则确定左右子节点：</p><ul><li>左子节点：<code>index * 2 + 1</code></li><li>右子节点：<code>index * 2 + 2</code></li><li>父节点：<code>(index - 1) / 2</code>（去除小数位）</li></ul>',26);function A(f,C){const o=c("Mermaid");return a(),n("div",null,[r,e("ul",null,[u,e("li",null,[s,p,i(o,{id:"mermaid-63",code:"eJzT1dXlKsksyUm1Uni6ZPmzBTufLmjjAgmm5eSXJ2ckFpUohDhxmSvo6topmEJpMy5TMG0IpY24zMC0MZQ24QIAqWwWcg=="}),m,i(o,{id:"mermaid-71",code:"eJzT1dXlKsksyUm1Uni6of/Zgp1PF7RxgQTTcvLLkzMSi0oUQpy4FBQMFXR17RSM4CxjIMsIzDKBs0yBLGMwywzOMucCAKx3F9Q="})]),k,b]),i(o,{id:"mermaid-108",code:"eJzT1dXlKsksyUm1Uni6rufZ1C3PFkzkAgmm5eSXJ2ckFpUohDhxKSgYKujq2ikYwVnGQJYRmGUCZ5kCWcZglhmcZc4FAKlXF8s="}),i(o,{id:"mermaid-109",code:"eJzT1dXlKsksyUm1Uni6rufZ1C3PFkzkAgmm5eSXJ2ckFpUohDhxKSgYKujq2ikYwVnGQJYRmGUCZzlq5JXm5GgC+cZgvhMa3xnKBwC6hh4T"}),i(o,{id:"mermaid-110",code:"eJzT1dXlKsksyUm1Uniyo/fZjPVP1/U8m7rl2YKJXCCptJz88uSMxKIShRAnLgUFQwVdXTsFIzjLGMgyArMcNfJKc3I04XwTIMsYzHKCy0D4zlA+AK+9Imk="}),_,S,i(o,{id:"mermaid-119",code:"eJzT1dXlKsksyUm1UjBVeDZj/dMFbc9ntTyb0/B0Qt+THQ1Pdqx60dX0vGknF0hhWk5+eXJGYlGJQogTl4KCoYKurp2CEZxlDGQZgVkmcJYpkGUMZjlp5JXm5GjC+c5QPgCUOSil"}),x])}const g=d(h,[["render",A],["__file","index.html.vue"]]);export{g as default};
