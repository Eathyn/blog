import{_ as o,W as l,X as p,Y as n,Z as a,$ as t,a0 as s,C as c}from"./framework-0d71bc9d.js";const i={},r=s('<h1 id="babel" tabindex="-1"><a class="header-anchor" href="#babel" aria-hidden="true">#</a> Babel</h1><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><ul><li>将 JavaScript 转化为低版本的 JavaScript。</li><li>添加 Polyfill。</li></ul><h2 id="babel-cli" tabindex="-1"><a class="header-anchor" href="#babel-cli" aria-hidden="true">#</a> @babel/cli</h2><ul><li><code>@babel/cli</code>：允许开发者在终端使用 Babel。</li></ul><h2 id="babel-preset-env" tabindex="-1"><a class="header-anchor" href="#babel-preset-env" aria-hidden="true">#</a> @babel/preset-env</h2>',6),u={href:"https://babeljs.io/docs/babel-preset-env",target:"_blank",rel:"noopener noreferrer"},d=s('<ul><li><p>Babel 插件（例如 <code>@babel/plugin-transform-arrow-functions</code>）用来告诉 Babel 如何转化 JavaScript 代码。</p></li><li><p><code>@babel/preset-env</code> 是一系列插件的集合，作用是让开发者不需要手动地引入需要的插件。</p></li><li><p>Babel 可以使用 <code>browserslist</code> 返回的浏览器列表，只引入 <code>@babel/preset-env</code> 中需要的插件。</p></li><li><p><code>@babel/preset-env</code> 不支持 Stage 3 以下的特性，因为这些特性浏览器还未实现。</p></li></ul><h3 id="usebuiltins" tabindex="-1"><a class="header-anchor" href="#usebuiltins" aria-hidden="true">#</a> useBuiltIns</h3><ul><li><code>useBuiltIns: entry</code>：根据要支持的浏览器种类和版本导入全部 polyfill。需要在入口文件引入 <code>core-js</code>。</li><li><code>useBuiltIns: usage</code>：根据要支持的浏览器种类和版本导入需要的 polyfill。</li><li><code>useBuiltIns: false</code>：不添加 polyfill。</li></ul><h2 id="babel-plugin-transform-runtime" tabindex="-1"><a class="header-anchor" href="#babel-plugin-transform-runtime" aria-hidden="true">#</a> @babel/plugin-transform-runtime</h2>',4),b={href:"https://babeljs.io/docs/babel-plugin-transform-runtime#why",target:"_blank",rel:"noopener noreferrer"},k=s(`<ul><li>作用：可以从 <code>runtime-corejs3</code> 包中引入工具函数，以此实现语法和 API。如果不使用 <code>@babel/plugin-transform-runtime</code>，那么 Babel 会在每个 JavaScript 文件中定义工具函数，这样会增加打包体积：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> _interopRequireDefault <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@babel/runtime-corejs3/helpers/interopRequireDefault&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 转换语法</span>
<span class="token keyword">var</span> _promise <span class="token operator">=</span> <span class="token function">_interopRequireDefault</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@babel/runtime-corejs3/core-js-stable/promise&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 实现 API</span>
<span class="token keyword">var</span> _includes <span class="token operator">=</span> <span class="token function">_interopRequireDefault</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@babel/runtime-corejs3/core-js-stable/instance/includes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">_promise</span><span class="token punctuation">[</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _includes<span class="token punctuation">[</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function m(h,v){const e=c("ExternalLinkIcon");return l(),p("div",null,[r,n("blockquote",null,[n("p",null,[a("Reference: "),n("a",u,[a("@babel/preset-env"),t(e)])])]),d,n("blockquote",null,[n("p",null,[a("Reference: "),n("a",b,[a("@babel/plugin-transform-runtime"),t(e)])])]),k])}const _=o(i,[["render",m],["__file","index.html.vue"]]);export{_ as default};
