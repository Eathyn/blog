import{_ as p,W as o,X as c,Y as n,Z as s,$ as t,a0 as a,C as l}from"./framework-0d71bc9d.js";const i={},r=a('<h1 id="generics" tabindex="-1"><a class="header-anchor" href="#generics" aria-hidden="true">#</a> Generics</h1><h2 id="definition" tabindex="-1"><a class="header-anchor" href="#definition" aria-hidden="true">#</a> Definition</h2><ul><li>使用泛型（generics）可以让函数、类、接口等结构不需要在定义时指定具体的类型，有利于代码复用。</li></ul><h2 id="generic-function" tabindex="-1"><a class="header-anchor" href="#generic-function" aria-hidden="true">#</a> Generic Function</h2><h3 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a> Basic Usage</h3>',5),u={href:"https://www.typescripttutorial.net/typescript-tutorial/typescript-generics/",target:"_blank",rel:"noopener noreferrer"},k=a(`<ul><li>可以在函数中使用泛型，定义参数和返回值类型。</li><li><code>T</code> 指的是类型变量（type variable），可以写成任意字母或单词。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getRandomElement</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>items<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> randomIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token keyword">return</span> items<span class="token punctuation">[</span>randomIndex<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> items1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">getRandomElement</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>items1<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>

<span class="token keyword">const</span> item2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">getRandomElement</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>item2<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arrow-function" tabindex="-1"><a class="header-anchor" href="#arrow-function" aria-hidden="true">#</a> Arrow Function</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 在函数上使用泛型</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn1</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> input
<span class="token punctuation">}</span>

<span class="token comment">// 在箭头函数上使用泛型</span>
<span class="token keyword">const</span> fn2 <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=&gt;</span> input
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="multiple-types" tabindex="-1"><a class="header-anchor" href="#multiple-types" aria-hidden="true">#</a> Multiple Types</h2>`,5),d={href:"https://www.typescripttutorial.net/typescript-tutorial/typescript-generics/",target:"_blank",rel:"noopener noreferrer"},v=a(`<ul><li>泛型可以定义多个类型变量，如下代码中的 <code>U</code> 和 <code>V</code>。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  subject<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  grade<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">merge</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">U</span> <span class="token keyword">extends</span> object<span class="token punctuation">,</span> <span class="token constant">V</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj1<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">,</span> obj2<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>obj1<span class="token punctuation">,</span>
    <span class="token operator">...</span>obj2<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> person1<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Jeff&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> teacher1<span class="token operator">:</span> Teacher <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Eaven&#39;</span><span class="token punctuation">,</span> subject<span class="token operator">:</span> <span class="token string">&#39;Math&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">merge</span><span class="token generic class-name"><span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> Teacher<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> teacher1<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;Eaven&#39;, age: 18, subject: &#39;Math&#39; }</span>

<span class="token keyword">const</span> person2<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Jeff&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> student1<span class="token operator">:</span> Student <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Eaven&#39;</span><span class="token punctuation">,</span> grade<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">merge</span><span class="token generic class-name"><span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> Student<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>person2<span class="token punctuation">,</span> student1<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span> <span class="token comment">// { name: &#39;Eaven&#39;, age: 18, grade: 4 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="generic-constrain" tabindex="-1"><a class="header-anchor" href="#generic-constrain" aria-hidden="true">#</a> Generic Constrain</h2><h3 id="extends" tabindex="-1"><a class="header-anchor" href="#extends" aria-hidden="true">#</a> extends</h3>`,4),b={href:"https://www.typescripttutorial.net/typescript-tutorial/typescript-generic-constraints/",target:"_blank",rel:"noopener noreferrer"},m=a(`<ul><li>调用 <code>merge({ name: &#39;Jeff&#39;, age: 18 }, 100)</code> 不会报错，因为 TypeScript 把 <code>U</code> 推断为 <code>object</code> 类型，把 <code>V</code> 推断为 <code>number</code> 类型。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>
  subject<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">merge</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj1<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">,</span> obj2<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>obj1<span class="token punctuation">,</span>
    <span class="token operator">...</span>obj2<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Jeff&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 不会报错</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上述问题有两种解决方案： <ul><li>方案一：调用函数时指定类型。</li><li>方案二：使用 <code>extends</code> 关键字限制泛型类型变量的类型。</li></ul></li></ul><p><em>方案一</em></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>
  subject<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">merge</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj1<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">,</span> obj2<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>obj1<span class="token punctuation">,</span>
    <span class="token operator">...</span>obj2<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token generic-function"><span class="token function">merge</span><span class="token generic class-name"><span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> Teacher<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Jeff&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 第二个参数报错</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>方案二</em></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>
  subject<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">merge</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">U</span> <span class="token keyword">extends</span> object<span class="token punctuation">,</span> <span class="token constant">V</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj1<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">,</span> obj2<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>obj1<span class="token punctuation">,</span>
    <span class="token operator">...</span>obj2<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Jeff&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 第二个参数报错</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="extends-keyof" tabindex="-1"><a class="header-anchor" href="#extends-keyof" aria-hidden="true">#</a> extends + keyof</h3>`,8),g={href:"https://www.typescripttutorial.net/typescript-tutorial/typescript-generic-constraints/",target:"_blank",rel:"noopener noreferrer"},h=a(`<ul><li>因为 <code>obj</code> 可能没有 <code>prop</code> 这个属性，所以执行 <code>obj[prop]</code> 会报错：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getVal</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> prop<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token comment">// TS2536: Type &#39;K&#39; cannot be used to index type &#39;T&#39;.</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上述问题可以使用 <code>extends</code> + <code>keyof</code> 解决。<code>K extends keyof T</code> 表示 <code>K</code> 是 <code>T</code> 的某个属性：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getVal</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> prop<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token comment">// 不会报错</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="generic-class" tabindex="-1"><a class="header-anchor" href="#generic-class" aria-hidden="true">#</a> Generic Class</h2>`,5),f={href:"https://www.typescripttutorial.net/typescript-tutorial/typescript-generic-classes/",target:"_blank",rel:"noopener noreferrer"},y=a(`<ul><li>类中可以使用泛型。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Stack<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">push</span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span>

stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="generic-interface" tabindex="-1"><a class="header-anchor" href="#generic-interface" aria-hidden="true">#</a> Generic Interface</h2><h3 id="basic-usage-1" tabindex="-1"><a class="header-anchor" href="#basic-usage-1" aria-hidden="true">#</a> Basic Usage</h3>`,4),w={href:"https://www.typescripttutorial.net/typescript-tutorial/typescript-generic-classes/",target:"_blank",rel:"noopener noreferrer"},_=a(`<ul><li>接口可以使用泛型。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Pair<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  key<span class="token operator">:</span> <span class="token constant">K</span>
  value<span class="token operator">:</span> <span class="token constant">V</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> month<span class="token operator">:</span> Pair<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  key<span class="token operator">:</span> <span class="token string">&#39;Jan&#39;</span><span class="token punctuation">,</span>
  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person<span class="token operator">:</span> Pair<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  key<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>
  value<span class="token operator">:</span> <span class="token string">&#39;Jeff&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="describe-index-type" tabindex="-1"><a class="header-anchor" href="#describe-index-type" aria-hidden="true">#</a> Describe Index Type</h3>`,3),x={href:"https://www.typescripttutorial.net/typescript-tutorial/typescript-generic-classes/",target:"_blank",rel:"noopener noreferrer"},T=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Options<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> inputOptions<span class="token operator">:</span> Options<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  disabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  visible<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function j(V,S){const e=l("ExternalLinkIcon");return o(),c("div",null,[r,n("blockquote",null,[n("p",null,[s("Reference: "),n("a",u,[s("TypeScript Tutorial"),t(e)])])]),k,n("blockquote",null,[n("p",null,[s("Reference: "),n("a",d,[s("TypeScript Tutorial"),t(e)])])]),v,n("blockquote",null,[n("p",null,[s("Reference: "),n("a",b,[s("TypeScript Tutorial"),t(e)])])]),m,n("blockquote",null,[n("p",null,[s("Reference: "),n("a",g,[s("TypeScript Tutorial"),t(e)])])]),h,n("blockquote",null,[n("p",null,[s("Reference: "),n("a",f,[s("TypeScript Tutorial"),t(e)])])]),y,n("blockquote",null,[n("p",null,[s("Reference: "),n("a",w,[s("TypeScript Tutorial"),t(e)])])]),_,n("blockquote",null,[n("p",null,[s("Reference: "),n("a",x,[s("TypeScript Tutorial"),t(e)])])]),T])}const U=p(i,[["render",j],["__file","generics.html.vue"]]);export{U as default};
