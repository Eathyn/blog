import{_ as e,W as o,X as t,Y as n,Z as s,$ as p,a0 as i,C as c}from"./framework-c8ebc670.js";const l={},r=n("h1",{id:"insertion-sort",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#insertion-sort","aria-hidden":"true"},"#"),s(" Insertion Sort")],-1),u=n("h2",{id:"原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原理","aria-hidden":"true"},"#"),s(" 原理")],-1),d=n("p",null,"Reference:",-1),k=n("li",null,[s("Book: "),n("em",null,"A Common-Sense Guide to DSA"),s(": p79-p84")],-1),m={href:"https://youtu.be/8mJ-OhcfpYg",target:"_blank",rel:"noopener noreferrer"},v=n("em",null,"Learn Insertion Sort in 7 minutes",-1),b=i(`<ol><li>从数组的第二项开始，比较第 <code>i</code> 项与第 <code>i</code> 项左边的所有项。</li><li>如果第 <code>i</code> 项比左边的某一项小，则这一项向右移动一位。</li><li>如果第 <code>i</code> 项比左边的某一项大，则第 <code>i</code> 项占用第 <code>position + 1</code> 项的位置，然后结束本次比较。</li><li><code>i + 1</code> 重复执行第一至三步骤，直到 <code>i</code> 小于数组的长度。</li></ol><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \`let i = 1\`：因为第一项左边没数据，不需要进行比较，所以从第二项开始</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">let</span> position <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token comment">// 第 i 项与左边的数据进行比较</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>position <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果第 i 项比左边的某一项小，则这一项向右移动一位</span>
        arr<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>position<span class="token punctuation">]</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果第 i 项比左边的某一项大，则结束本次比较</span>
        <span class="token keyword">break</span>
      <span class="token punctuation">}</span>
      position<span class="token operator">--</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 处理两种情况：</span>
    <span class="token comment">// 1. 第 i 项小于左边的所有项，此时 position 等于 -1，第 i 项占用第一项的位置</span>
    <span class="token comment">// 2. 第 i 项大于左边的某一项，此时 position 大于 -1，第 i 项占用第 position + 1 项的位置</span>
    arr<span class="token punctuation">[</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function h(_,f){const a=c("ExternalLinkIcon");return o(),t("div",null,[r,u,n("blockquote",null,[d,n("ul",null,[k,n("li",null,[s("Video: "),n("a",m,[v,p(a)])])])]),b])}const w=e(l,[["render",h],["__file","index.html.vue"]]);export{w as default};
