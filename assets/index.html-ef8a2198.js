const e=JSON.parse('{"key":"v-ea89fe32","path":"/front_end/javascript/module/intro/","title":"Module Introduction","lang":"zh-CN","frontmatter":{"date":"2023-06-17T00:00:00.000Z","category":"JavaScript","description":"Module Introduction Reason As our application grows bigger, we want to split it into multiple files, so-called “modules”. A module may contain a class or a library of functions for a specific purpose. For a long time, JavaScript existed without a language-level module syntax. That was not a problem, because initially scripts were small and simple, so there was no need.But eventually scripts became more and more complex, so the community invented a variety of ways to organize code into modules, special libraries to load modules on demand.","head":[["meta",{"property":"og:url","content":"https://eathyn.github.io/blog/blog/front_end/javascript/module/intro/"}],["meta",{"property":"og:title","content":"Module Introduction"}],["meta",{"property":"og:description","content":"Module Introduction Reason As our application grows bigger, we want to split it into multiple files, so-called “modules”. A module may contain a class or a library of functions for a specific purpose. For a long time, JavaScript existed without a language-level module syntax. That was not a problem, because initially scripts were small and simple, so there was no need.But eventually scripts became more and more complex, so the community invented a variety of ways to organize code into modules, special libraries to load modules on demand."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2023-06-17T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Module Introduction\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-17T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Reason","slug":"reason","link":"#reason","children":[]},{"level":2,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":2,"title":"Features","slug":"features","link":"#features","children":[{"level":3,"title":"strict mode","slug":"strict-mode","link":"#strict-mode","children":[]},{"level":3,"title":"scope","slug":"scope","link":"#scope","children":[]},{"level":3,"title":"executed only once","slug":"executed-only-once","link":"#executed-only-once","children":[]},{"level":3,"title":"i​mport.meta","slug":"import-meta","link":"#import-meta","children":[]},{"level":3,"title":"this","slug":"this","link":"#this","children":[]},{"level":3,"title":"defer","slug":"defer","link":"#defer","children":[]},{"level":3,"title":"async works on inline scripts","slug":"async-works-on-inline-scripts","link":"#async-works-on-inline-scripts","children":[]},{"level":3,"title":"run only once","slug":"run-only-once","link":"#run-only-once","children":[]},{"level":3,"title":"cross-origin","slug":"cross-origin","link":"#cross-origin","children":[]}]},{"level":2,"title":"Attention","slug":"attention","link":"#attention","children":[]},{"level":2,"title":"Refs","slug":"refs","link":"#refs","children":[]}],"git":{},"readingTime":{"minutes":1.44,"words":432},"filePathRelative":"front_end/javascript/module/intro/index.md","localizedDate":"2023年6月17日","excerpt":"<h1> Module Introduction</h1>\\n<h2> Reason</h2>\\n<ul>\\n<li>As our application grows bigger, we want to split it into multiple files, so-called “modules”. A module may contain a class or a library of functions for a specific purpose. For a long time, JavaScript existed without a language-level module syntax. That was not a problem, because initially scripts were small and simple, so there was no need.But eventually scripts became more and more complex, so the community invented a variety of ways to organize code into modules, special libraries to load modules on demand.</li>\\n</ul>","autoDesc":true}');export{e as data};
