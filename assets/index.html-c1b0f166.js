const e=JSON.parse('{"key":"v-fddaad4a","path":"/front_end/typescript/course-ts_basic/75/","title":"75 为已有的 JS 文件提供类型声明 - 实现","lang":"zh-CN","frontmatter":{"date":"2023-01-06T00:00:00.000Z","category":"TypeScript","tag":["Course - TypeScript Basic"],"description":"75 为已有的 JS 文件提供类型声明 - 实现 Content 在 TS 文件中导入 JS 文件时，TS 会自动加载与 JS 文件同名的 .d.ts 文件。例如：导入 utils.js 同时会加载 utils.d.ts declare 关键字用于类型声明，为其他地方（例如 JS 文件）已存在的变量声明类型，而不是创建一个新的类型 interface / type 声明的类型可以省略 declare；let / function 等声明的类型必须用 declare","head":[["meta",{"property":"og:url","content":"https://eathyn.github.io/blog/blog/front_end/typescript/course-ts_basic/75/"}],["meta",{"property":"og:title","content":"75 为已有的 JS 文件提供类型声明 - 实现"}],["meta",{"property":"og:description","content":"75 为已有的 JS 文件提供类型声明 - 实现 Content 在 TS 文件中导入 JS 文件时，TS 会自动加载与 JS 文件同名的 .d.ts 文件。例如：导入 utils.js 同时会加载 utils.d.ts declare 关键字用于类型声明，为其他地方（例如 JS 文件）已存在的变量声明类型，而不是创建一个新的类型 interface / type 声明的类型可以省略 declare；let / function 等声明的类型必须用 declare"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Course - TypeScript Basic"}],["meta",{"property":"article:published_time","content":"2023-01-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"75 为已有的 JS 文件提供类型声明 - 实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Content","slug":"content","link":"#content","children":[]},{"level":2,"title":"Code","slug":"code","link":"#code","children":[]},{"level":2,"title":"Refs","slug":"refs","link":"#refs","children":[]}],"git":{},"readingTime":{"minutes":0.9,"words":269},"filePathRelative":"front_end/typescript/course-ts_basic/75/index.md","localizedDate":"2023年1月6日","excerpt":"<h1> 75 为已有的 JS 文件提供类型声明 - 实现</h1>\\n<h2> Content</h2>\\n<ul>\\n<li>在 TS 文件中导入 JS 文件时，TS 会自动加载与 JS 文件同名的 <code>.d.ts</code> 文件。例如：导入 <code>utils.js</code> 同时会加载 <code>utils.d.ts</code></li>\\n<li><code>declare</code> 关键字用于类型声明，为其他地方（例如 JS 文件）已存在的变量声明类型，而不是创建一个新的类型</li>\\n<li><code>interface</code> / <code>type</code> 声明的类型可以省略 <code>declare</code>；<code>let</code> / <code>function</code> 等声明的类型必须用 <code>declare</code></li>\\n</ul>","autoDesc":true}');export{e as data};
