import{_ as t,W as o,X as c,Y as e,Z as i,$ as l,a0 as n,C as r}from"./framework-c8ebc670.js";const d={},s=e("h1",{id:"configuration",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#configuration","aria-hidden":"true"},"#"),i(" Configuration")],-1),h=e("h2",{id:"configuration-files",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#configuration-files","aria-hidden":"true"},"#"),i(" Configuration Files")],-1),g=e("p",null,"reference:",-1),u=e("li",null,"Pro Git: p20-p21",-1),f=e("li",null,"Pro Git: p336",-1),p={href:"https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-config",target:"_blank",rel:"noopener noreferrer"},b=n(`<p><code>git config --list --show-origin</code> 命令可以找到所有 Git 配置文件。</p><h3 id="system" tabindex="-1"><a class="header-anchor" href="#system" aria-hidden="true">#</a> System</h3><ul><li>定义：配置文件适用于本系统下的所有用户和仓库。</li><li>命令：<code>git config --system</code></li><li>配置文件的路径：<code>&lt;Git的安装目录&gt;/etc/gitconfig</code></li></ul><h3 id="global" tabindex="-1"><a class="header-anchor" href="#global" aria-hidden="true">#</a> Global</h3><ul><li>定义：配置文件适用于某个用户和他的所有仓库。</li><li>命令：<code>git config --global</code></li><li>配置文件的路径：<code>C:/User/&lt;username&gt;/.gitconfig</code></li></ul><h3 id="local" tabindex="-1"><a class="header-anchor" href="#local" aria-hidden="true">#</a> Local</h3><ul><li>定义：配置文件适用于某个仓库。</li><li>命令：<code>git config --local</code>（--local 是默认参数）</li><li>配置文件的路径：<code>&lt;仓库路径&gt;/.git/config</code></li></ul><h2 id="get-a-config" tabindex="-1"><a class="header-anchor" href="#get-a-config" aria-hidden="true">#</a> Get a Config</h2><p><code>git config --get &lt;name&gt;</code> 可以获取某一个配置。例如：</p><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>git config --get user.name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="set-a-config" tabindex="-1"><a class="header-anchor" href="#set-a-config" aria-hidden="true">#</a> Set a Config</h2><p><code>git config &lt;name&gt; &lt;value&gt;</code> 可以设置某一个配置。例如：</p><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>git config user.name Eaven
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="get-all-config" tabindex="-1"><a class="header-anchor" href="#get-all-config" aria-hidden="true">#</a> Get all Config</h2><p><code>git config --list</code> 可以获取所有配置。</p><h2 id="delete-a-config" tabindex="-1"><a class="header-anchor" href="#delete-a-config" aria-hidden="true">#</a> Delete a Config</h2><p><code>git config --unset &lt;name&gt;</code> 删除指定的配置。</p><h2 id="lf-and-crlf" tabindex="-1"><a class="header-anchor" href="#lf-and-crlf" aria-hidden="true">#</a> LF and CRLF</h2>`,18),_={href:"http://kuanghy.github.io/2017/03/19/git-lf-or-crlf",target:"_blank",rel:"noopener noreferrer"},m=n(`<h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><ul><li><p>Unix 和 Linux 的换行符是 <code>0x0A(LF)</code>，Windows 的换行符是 <code>0x0D0A(CRLF)</code>。</p></li><li><p>配置 Git 的 <code>core.autocrlf</code> 和 <code>core.safecrlf</code> 可以解决上述问题：</p></li></ul><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code><span class="token comment"># 统一为 LF</span>
git config --global core.autocrlf input
git config --global core.safecrlf false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>core.autocrlf</code> 有三个值： <ul><li>true: 提交时转换为 LF，检出时转换为 CRLF。</li><li>false: 提交和检出时均不转换。</li><li>input: 提交时转换为 LF，检出时不转换。</li></ul></li></ul><h3 id="转换" tabindex="-1"><a class="header-anchor" href="#转换" aria-hidden="true">#</a> 转换</h3><ul><li>在 Git Bash 中，使用 <code>dos2unix &lt;file-path&gt;</code> 可以将指定的文件的换行符全部转为 <code>LF</code>。</li><li>在 Git Bash 中，使用 <code>unix2dos &lt;file-path&gt;</code> 可以将指定的文件的换行符全部转为 <code>CRLF</code>。</li></ul><h2 id="safecrlf" tabindex="-1"><a class="header-anchor" href="#safecrlf" aria-hidden="true">#</a> SafeCRLF</h2>`,7),x={href:"http://kuanghy.github.io/2017/03/19/git-lf-or-crlf",target:"_blank",rel:"noopener noreferrer"},v=e("p",null,[e("code",null,"core.safecrlf"),i(" 有三个值：")],-1),k=e("ul",null,[e("li",null,"true: 不允许提交包含混合换行符的文件。"),e("li",null,"false: 允许提交包含混合换行符的文件"),e("li",null,"warn: 提交包含混合换行符的文件时给出警告。")],-1),L=e("h2",{id:"multiple-ssh-keys",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#multiple-ssh-keys","aria-hidden":"true"},"#"),i(" Multiple SSH Keys")],-1),C={href:"https://gist.github.com/aprilmintacpineda/f101bf5fd34f1e6664497cf4b9b9345f",target:"_blank",rel:"noopener noreferrer"};function F(y,G){const a=r("ExternalLinkIcon");return o(),c("div",null,[s,h,e("blockquote",null,[g,e("ul",null,[u,f,e("li",null,[e("a",p,[i("git config"),l(a)])])])]),b,e("blockquote",null,[e("p",null,[i("Reference: "),e("a",_,[i("blog"),l(a)])])]),m,e("blockquote",null,[e("p",null,[i("Reference: "),e("a",x,[i("blog"),l(a)])])]),v,k,L,e("blockquote",null,[e("p",null,[i("Reference: "),e("a",C,[i("Using Multiple SSH Keys"),l(a)])])])])}const S=t(d,[["render",F],["__file","index.html.vue"]]);export{S as default};
