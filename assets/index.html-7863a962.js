const n=JSON.parse(`{"key":"v-12e32414","path":"/front_end/implement/deep_copy/","title":"深拷贝","lang":"zh-CN","frontmatter":{"date":"2023-06-18T00:00:00.000Z","category":"JavaScript","description":"深拷贝 定义 浅拷贝（shallow copy）：如果属性值是原始值类型，则复制原始值；如果属性值是对象类型，则复制堆内存地址。 深拷贝（deep copy）：如果属性值是原始值类型，则复制原始值；如果属性值是对象类型，则在堆中复制对象类型。 实现 function deepCopy(original) { if (Array.isArray(original)) { const copy = [] for (const [index, val] of original.entries()) { copy[index] = deepCopy(val) } return copy } if (typeof original === 'object' &amp;&amp; original !== null) { const copy = {} for (const [key, val] of Object.entries(original)) { copy[key] = deepCopy(val) } return copy } // primitives return original }","head":[["meta",{"property":"og:url","content":"https://eathyn.github.io/blog/blog/front_end/implement/deep_copy/"}],["meta",{"property":"og:title","content":"深拷贝"}],["meta",{"property":"og:description","content":"深拷贝 定义 浅拷贝（shallow copy）：如果属性值是原始值类型，则复制原始值；如果属性值是对象类型，则复制堆内存地址。 深拷贝（deep copy）：如果属性值是原始值类型，则复制原始值；如果属性值是对象类型，则在堆中复制对象类型。 实现 function deepCopy(original) { if (Array.isArray(original)) { const copy = [] for (const [index, val] of original.entries()) { copy[index] = deepCopy(val) } return copy } if (typeof original === 'object' &amp;&amp; original !== null) { const copy = {} for (const [key, val] of Object.entries(original)) { copy[key] = deepCopy(val) } return copy } // primitives return original }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2023-06-18T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深拷贝\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"git":{},"readingTime":{"minutes":0.47,"words":140},"filePathRelative":"front_end/implement/deep_copy/index.md","localizedDate":"2023年6月18日","excerpt":"<h1> 深拷贝</h1>\\n<h2> 定义</h2>\\n<ul>\\n<li>浅拷贝（shallow copy）：如果属性值是原始值类型，则复制原始值；如果属性值是对象类型，则复制堆内存地址。</li>\\n<li>深拷贝（deep copy）：如果属性值是原始值类型，则复制原始值；如果属性值是对象类型，则在堆中复制对象类型。</li>\\n</ul>\\n<h2> 实现</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">deepCopy</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">original</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>Array<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">isArray</span><span class=\\"token punctuation\\">(</span>original<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> copy <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">]</span> <span class=\\"token keyword\\">of</span> original<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">entries</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      copy<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">deepCopy</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> copy\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> original <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'object'</span> <span class=\\"token operator\\">&amp;&amp;</span> original <span class=\\"token operator\\">!==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> copy <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">,</span> val<span class=\\"token punctuation\\">]</span> <span class=\\"token keyword\\">of</span> Object<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">entries</span><span class=\\"token punctuation\\">(</span>original<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      copy<span class=\\"token punctuation\\">[</span>key<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">deepCopy</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">return</span> copy\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token comment\\">// primitives</span>\\n  <span class=\\"token keyword\\">return</span> original\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
