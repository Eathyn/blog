import{_ as a,W as e,X as t,$ as p,a0 as n,C as o}from"./framework-0d71bc9d.js";const c={},l=n('<h1 id="binary-search-tree" tabindex="-1"><a class="header-anchor" href="#binary-search-tree" aria-hidden="true">#</a> Binary Search Tree</h1><h2 id="其他的数据结构" tabindex="-1"><a class="header-anchor" href="#其他的数据结构" aria-hidden="true">#</a> 其他的数据结构</h2><ul><li><p>ordered array</p><ul><li>search: O(logN) binary search</li><li>insertion: O(N) worst case</li><li>deletion: O(N) worst case</li></ul></li><li><p>hash table</p><ul><li>search: O(1)</li><li>insertion: O(1)</li><li>deletion: O(1)</li><li>but hash table is unordered</li></ul></li></ul><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><p>二叉搜索树（binary search tree）：</p><ul><li>每个节点最多有两个子节点（二叉树的特性）。</li><li>左子节点的值小于它的父节点值，右子节点的值大于它的父节点值。</li><li>当前节点值大于所有属于左子树的后代节点值，当前节点值小于所有属于右子树的后代节点值（由上一条特性推导得出）。</li></ul>',6),i=n(`<h2 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h2><blockquote><p>Reference</p><ul><li><em>A Common-Sense Guide to Data Structures and Algorithms</em> : p251-256</li></ul></blockquote><h3 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h3><ul><li>比较查询值（searchValue）和当前节点值（node.value）；</li><li>如果相等，则说明找到了（递归的基准条件）；</li><li>如果查询值比当前节点值大，那么根据二叉查找树的特性排除掉左子树，往当前节点的右子树查找；</li><li>如果查询值比当前节点值小，那么根据二叉查找树的特性排除掉右子树，往当前节点的左子树查找；</li><li>如果当前节点为 null，说明查询到叶子节点的子节点也查不到，结束查询（递归的基准条件）。</li></ul><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">searchValue<span class="token punctuation">,</span> node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// base case: 找不到查询的值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// base case: 找到查询的值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>searchValue <span class="token operator">===</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span>

  <span class="token comment">// 查询的值比当前节点的值大，则往右子树查找</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>searchValue <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>searchValue<span class="token punctuation">,</span> node<span class="token punctuation">.</span>rightChild<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 查询的值比当前节点的值小，则往左子树查找</span>
    <span class="token keyword">return</span>  <span class="token function">search</span><span class="token punctuation">(</span>searchValue<span class="token punctuation">,</span> node<span class="token punctuation">.</span>leftChild<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复杂度" tabindex="-1"><a class="header-anchor" href="#复杂度" aria-hidden="true">#</a> 复杂度</h3><ul><li><p>因为二叉搜索树每次查找都向下移动一层，因此它的时间复杂度与树的层数相关联。</p></li><li><p>最差的情况是变成退化树，此时 <code>N</code> 个结点会形成有 <code>N</code> 层的树。所以时间复杂度是 <code>O(N)</code>。</p></li><li><p>平均的情况是变成平衡树，此时 <code>N</code> 个结点会形成有 <code>logN</code> 层的树，每次递归都会把范围缩小到左子树或右子树，即排除一半的节点，所以时间复杂度是 <code>O(logN)</code>。</p></li></ul><h2 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h2><h3 id="算法-1" tabindex="-1"><a class="header-anchor" href="#算法-1" aria-hidden="true">#</a> 算法</h3><ol><li>currentNode 指向根节点。</li><li>如果插入的值等于 currentNode 的值，则提示节点已存在；如果插入的值比 currentNode 的值小，则 currentNode 指向左子树；反之 currentNode 指向右子树。</li><li>直到找到一个空位置并插入到这个位置。</li></ol><h3 id="实现-1" tabindex="-1"><a class="header-anchor" href="#实现-1" aria-hidden="true">#</a> 实现</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;the node is exist&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>leftNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">insert</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> node<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>rightNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">insert</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> node<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复杂度-1" tabindex="-1"><a class="header-anchor" href="#复杂度-1" aria-hidden="true">#</a> 复杂度</h3><p>原理与查找操作的时间复杂度一样：</p><ul><li>如果树是退化树，则插入操作的时间复杂度为 <code>O(N)</code>。</li><li>如果树是平衡树，则插入操作的时间复杂度为 <code>O(logN)</code>。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>有序数组插入操作的时间复杂度：</p><ul><li>使用二分查找确定位置，时间复杂度为：O(logN)。</li><li>如果在数组的开头插入数据，那么后面的数据都需要向后移动一位，时间复杂度为：O(N)。</li><li>总和：O(logN + N) =&gt; O(N)。</li></ul></div><h2 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h2><blockquote><p>A Common-Sense Guide to DSA: p260 - 271</p></blockquote><h3 id="算法-2" tabindex="-1"><a class="header-anchor" href="#算法-2" aria-hidden="true">#</a> 算法</h3><ul><li>如果待删除的节点没有子节点，则直接删除。</li><li>如果待删除的节点只有一个子节点，则该子节点替代待删除节点，然后删除待删除节点。</li><li>如果待删除的节点有两个子节点，就需要先寻找后续节点（successor node）：后续节点是待删除节点的右子树中的最小值。然后分两种情况处理： <ul><li>后续节点没有右子节点：后续节点替换待删除节点</li><li>后续节点有右子节点：后续节点替换待删除节点，并且后续节点的右子节点作为后续节点的原父节点的右子节点。</li></ul></li></ul><h3 id="实现-2" tabindex="-1"><a class="header-anchor" href="#实现-2" aria-hidden="true">#</a> 实现</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// delete operation in binary search tree</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token parameter">valueToDelete<span class="token punctuation">,</span> node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valueToDelete <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>leftNode <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>valueToDelete<span class="token punctuation">,</span> node<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valueToDelete <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>valueToDelete<span class="token punctuation">,</span> node<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valueToDelete <span class="token operator">===</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理三种情况：</span>
    <span class="token comment">// 1. 当前节点没有左子节点</span>
    <span class="token comment">// 2. 当前节点没有右子节点</span>
    <span class="token comment">// 3. 当前节点没有子节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> node<span class="token punctuation">.</span>rightNode
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>rightNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> node<span class="token punctuation">.</span>leftNode
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 处理当前节点有两个子节点的情况</span>
      node<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> <span class="token function">lift</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
      <span class="token keyword">return</span> node
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">lift</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> nodeToDelete</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 寻找可以替换待删除节点的节点（即 successor node）：</span>
    <span class="token comment">// 1. 大于待删除节点的值</span>
    <span class="token comment">// 2. 步骤-1 中所有节点的最小值</span>
    node<span class="token punctuation">.</span>leftNode <span class="token operator">=</span> <span class="token function">lift</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span> nodeToDelete<span class="token punctuation">)</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将 successor node 的右子节点当作 successor node 的原父节点的右子节点</span>
    nodeToDelete<span class="token punctuation">.</span>value <span class="token operator">=</span> node<span class="token punctuation">.</span>value
    <span class="token keyword">return</span> node<span class="token punctuation">.</span>rightNode
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复杂度-2" tabindex="-1"><a class="header-anchor" href="#复杂度-2" aria-hidden="true">#</a> 复杂度</h3><p>原理与查找操作的时间复杂度一样：</p><ul><li>如果树是退化树，则插入操作的时间复杂度为 O(N)。</li><li>如果树是平衡树，则插入操作的时间复杂度为 O(logN)。</li></ul><h2 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h2><blockquote><p>Book: A Common-Sense Guide to DSA: p272 - p277</p></blockquote><p>树的遍历的时间复杂度是 <code>O(N)</code>。</p><h3 id="中序遍历-inorder-traverse" tabindex="-1"><a class="header-anchor" href="#中序遍历-inorder-traverse" aria-hidden="true">#</a> 中序遍历 inorder traverse</h3><p>根节点的遍历顺序位于中间：遍历左子树，然后根节点，最后右子树。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// inorder traverse in tree</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// base case</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="前序遍历-preorder-traverse" tabindex="-1"><a class="header-anchor" href="#前序遍历-preorder-traverse" aria-hidden="true">#</a> 前序遍历 preorder traverse</h3><p>根节点的遍历顺序位于最前：遍历根节点，然后左子树，最后右子树。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// preorder traverse in tree</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">preorderTraverse</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// base case</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token function">preorderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span>
  <span class="token function">preorderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="后序遍历-postorder-traverse" tabindex="-1"><a class="header-anchor" href="#后序遍历-postorder-traverse" aria-hidden="true">#</a> 后序遍历 postorder traverse</h3><p>根节点的遍历顺序位于最后：遍历左子树，然后右子树，最后根节点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// postorder traverse in tree</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">postorderTraverse</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// base case</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token function">postorderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span>
  <span class="token function">postorderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38);function u(d,r){const s=o("Mermaid");return e(),t("div",null,[l,p(s,{id:"mermaid-80",code:"eJzT1dXlKsksyUm1UkjKzEssqlQoTk0sSs5QKClKTeUCyabl5JcnZyQWlSiEOHEpKBgaKOjq2imYIpiGILYpmGkMZ1mA5CFMQyME28iACwDHORmt"}),i])}const v=a(c,[["render",u],["__file","index.html.vue"]]);export{v as default};
