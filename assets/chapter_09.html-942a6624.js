import{_ as n,W as s,X as a,a0 as e}from"./framework-0d71bc9d.js";const t={},p=e(`<h1 id="type-modifiers" tabindex="-1"><a class="header-anchor" href="#type-modifiers" aria-hidden="true">#</a> Type Modifiers</h1><h2 id="top-types" tabindex="-1"><a class="header-anchor" href="#top-types" aria-hidden="true">#</a> Top Types</h2><ul><li>A top type, or universal type, is a type that can represent any possible value in a system.</li><li>All types are assignable to a top type.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment">// ok</span>
<span class="token keyword">const</span> b<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="any-again" tabindex="-1"><a class="header-anchor" href="#any-again" aria-hidden="true">#</a> any, Again</h3><ul><li>Using <code>any</code> type tells TypeScript not to perform type checking on that value&#39;s assignability or members.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>If you want to indicate that a value can be anything, the <code>unknown</code> type is much safer.</li></ul><h3 id="unknown" tabindex="-1"><a class="header-anchor" href="#unknown" aria-hidden="true">#</a> unknown</h3><ul><li>TypeScript does not allow directly accessing properties of <code>unknown</code> typed value.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment">// TS2571: Object is of type &#39;unknown&#39;.</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>The <code>unknown</code> type value can&#39;t be assignable to types that are not a top type (<code>any</code> or <code>unknown</code>).</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment">// ok</span>
<span class="token keyword">const</span> b<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> a
<span class="token comment">// ok</span>
<span class="token keyword">const</span> c<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> a
<span class="token comment">// TS2322: Type &#39;unknown&#39; is not assignable to type &#39;number&#39;.</span>
<span class="token keyword">const</span> d<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>TypeScript will allow code to access members of <code>unknown</code> type value if the value&#39;s type is narrowed, such as <code>instanceof</code>, <code>typeof</code> or type assertion.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ok</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;do nothing&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>You should generally prefer using <code>unknown</code> instead of <code>any</code> when possible.</li></ul><h2 id="type-predicates" tabindex="-1"><a class="header-anchor" href="#type-predicates" aria-hidden="true">#</a> Type Predicates</h2><ul><li><code>instanceof</code> and <code>typeof</code> can&#39;t narrow a type when wrap the logic with a function.</li></ul><p>Stop: TS throw error</p><h2 id="type-operators" tabindex="-1"><a class="header-anchor" href="#type-operators" aria-hidden="true">#</a> Type Operators</h2><h3 id="keyof" tabindex="-1"><a class="header-anchor" href="#keyof" aria-hidden="true">#</a> keyof</h3><ul><li>TypeScript instead provides a <code>keyof</code> operator that takes in an existing type and gives back a union of all the keys allowed on that type.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getInfo1</span><span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// TS7053: Element implicitly has an &#39;any&#39; type because expression of type &#39;string&#39; can&#39;t be used to index type &#39;Person&#39;.</span>
  <span class="token comment">// No index signature with a parameter of type &#39;string&#39; was found on type &#39;Person&#39;.</span>
  <span class="token keyword">return</span> person<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getInfo2</span><span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token keyword">keyof</span> Person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> person<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// ok</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getInfo3</span><span class="token punctuation">(</span>person<span class="token operator">:</span> Person<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> person<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// ok</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h3><ul><li><code>typeof</code> operator in JavaScript: a runtime operator that returns the string name of a type</li><li><code>typeof</code> operator in TypeScript: a type operator, can only be used in types and won’t appear in compiled code</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;eathyn&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// typeof of &#39;result&#39;: { name: string, age: number }</span>
<span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token keyword">typeof</span> person
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>compiled code:</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;eathyn&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// typeof in TS is disappear</span>
<span class="token keyword">var</span> result<span class="token punctuation">;</span>

<span class="token comment">// typeof in JS is appear</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>TypeScript allows <code>keyof</code> and <code>typeof</code> to be chained together to succinctly retrieve the allowed keys on a value’s type.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;eathyn&#39;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// typeof of &#39;key&#39;: &#39;name&#39; | &#39;age&#39;</span>
<span class="token keyword">let</span> key<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> person
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-assertions" tabindex="-1"><a class="header-anchor" href="#type-assertions" aria-hidden="true">#</a> Type Assertions</h2><ul><li>type assertion: override the type system’s understanding of a value’s type, also known as a “type cast”. TypeScript will defer to your assertion and treat the value as that type.</li><li>syntax: <code>as</code> keyword followed by a type</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> rawData <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[&#39;eathyn&#39;, &#39;eaven&#39;]</span><span class="token template-punctuation string">\`</span></span>

<span class="token comment">// type of result1 : any</span>
<span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span>

<span class="token comment">// type of result2 : string[]</span>
<span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment">// type of result3: [string, string]</span>
<span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span>

<span class="token comment">// type of result4: [&#39;eathyn&#39;, &#39;eaven&#39;]</span>
<span class="token keyword">let</span> result4 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">[</span><span class="token string">&#39;eathyn&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eaven&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Type assertions exist only in the TypeScript type system. They’re removed along with all other pieces of type system syntax when compiled to JavaScript.</p></li><li><p>TypeScript best practice is generally to avoid using type assertions when possible.</p></li></ul><h3 id="asserting-caught-error-types" tabindex="-1"><a class="header-anchor" href="#asserting-caught-error-types" aria-hidden="true">#</a> Asserting Caught Error Types</h3><ul><li>It is generally impossible to know what type a caught error in a catch block will be because the code in the try block may unexpectedly throw any object different from what you expect.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;the error&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// TS1196: Catch clause variable type annotation must be &#39;any&#39; or &#39;unknown&#39; if specified.</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;the error&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error <span class="token keyword">as</span> Error<span class="token punctuation">)</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token comment">// ok</span>
<span class="token punctuation">}</span>

<span class="token comment">// safer version</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;the error&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> error<span class="token punctuation">.</span>message <span class="token operator">:</span> error<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="non-null-assertions" tabindex="-1"><a class="header-anchor" href="#non-null-assertions" aria-hidden="true">#</a> Non-Null Assertions</h3><ul><li>The <code>!</code> non-null assertion asserts that the type is not <code>null</code> or <code>undefined</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// type: null | undefined | string</span>
<span class="token keyword">let</span> data<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token builtin">string</span>

<span class="token comment">// type: string</span>
<span class="token keyword">let</span> filter <span class="token operator">=</span> data<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Non-null assertions are particularly useful with APIs such as <code>Map.get</code> that return a value or <code>undefined</code> if it doesn’t exist.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eathyn&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">&#39;hobby&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;coding&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// type: number | undefined</span>
<span class="token comment">// TS2532: Object is possibly &#39;undefined&#39;.</span>
<span class="token keyword">const</span> result1 <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// type: number</span>
<span class="token comment">// ok</span>
<span class="token keyword">const</span> result2 <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="type-assertion-caveats" tabindex="-1"><a class="header-anchor" href="#type-assertion-caveats" aria-hidden="true">#</a> Type Assertion Caveats</h3><ul><li>Like the <code>any</code> type, they should be avoided whenever reasonably possible.</li><li>It is often better to have more accurate types representing your code than it is to make it easier to assert on a value’s type.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eathyn&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// type: string</span>
<span class="token keyword">const</span> result1 <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span>
<span class="token comment">// Runtime TypeError: Cannot read property &#39;toUpperCase&#39; of undefined.</span>
result1<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="assertion-assignability" tabindex="-1"><a class="header-anchor" href="#assertion-assignability" aria-hidden="true">#</a> Assertion assignability</h4><ul><li>TypeScript will only allow type assertions between two types if one of the types is assignable to the other.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// TS2352: Conversion of type &#39;string&#39; to type &#39;number&#39; may be a mistake because neither type sufficiently overlaps with the other.</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token keyword">as</span> <span class="token builtin">number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>If you absolutely must switch a value from one type to a totally unrelated type, you can use a double type assertion.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// type: number</span>
data <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> <span class="token builtin">number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>as unknown as...</code> double type assertions are dangerous and almost always a sign of something incorrect in the types of the surrounding code.</li></ul><h2 id="const-assertions" tabindex="-1"><a class="header-anchor" href="#const-assertions" aria-hidden="true">#</a> Const Assertions</h2><ul><li>Arrays are treated as readonly tuples, not mutable arrays</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// type: readonly [1, 2, 3]</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="literals-to-primitives" tabindex="-1"><a class="header-anchor" href="#literals-to-primitives" aria-hidden="true">#</a> Literals to Primitives</h3><ul><li>Literals are treated as literals, not their general primitive equivalents.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// type: &#39;hello&#39;</span>
<span class="token keyword">let</span> data1 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span> <span class="token keyword">as</span> <span class="token keyword">const</span>

<span class="token comment">// type: &#39;hello&#39;</span>
<span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="read-only-objects" tabindex="-1"><a class="header-anchor" href="#read-only-objects" aria-hidden="true">#</a> Read-Only Objects</h3><ul><li>Properties on objects are considered readonly.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// type: { name: &#39;eathyn&#39; }</span>
<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&#39;eathyn&#39;</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
<span class="token punctuation">}</span>

<span class="token comment">// TS2322: Type &#39;&quot;eaven&quot;&#39; is not assignable to type &#39;&quot;eathyn&quot;&#39;.</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;eaven&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token string">&#39;yes&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;no&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;yes&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;true&#39;</span>
    <span class="token keyword">case</span> <span class="token string">&#39;no&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;no&#39;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token string">&#39;default&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// type: {value: string}</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;yes&#39;</span> <span class="token punctuation">}</span>
<span class="token comment">// {readonly value: &quot;yes&quot;}</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;yes&#39;</span> <span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span>

<span class="token comment">// TS2345: Argument of type &#39;string&#39; is not assignable to parameter of type &#39;&quot;yes&quot; | &quot;no&quot;&#39;.</span>
<span class="token function">fn</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token comment">// ok</span>
<span class="token function">fn</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61),o=[p];function i(l,c){return s(),a("div",null,o)}const u=n(t,[["render",i],["__file","chapter_09.html.vue"]]);export{u as default};
