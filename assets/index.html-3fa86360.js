import{_ as t,W as o,X as p,Y as n,Z as a,$ as e,a0 as c,C as r}from"./framework-0d71bc9d.js";const i={},l=c(`<h1 id="new-operator" tabindex="-1"><a class="header-anchor" href="#new-operator" aria-hidden="true">#</a> <code>new</code> Operator</h1><h2 id="creating-process" tabindex="-1"><a class="header-anchor" href="#creating-process" aria-hidden="true">#</a> Creating Process</h2><ol><li>创建一个空对象(即新实例)</li><li>将新实例的 <code>[[prototype]]</code> 属性指向构造函数 <code>prototype</code> 属性指向的对象</li><li>执行构造函数，并把 <code>this</code> 绑定到新实例上</li><li>如果构造函数返回对象，则将这个对象返回；如果构造函数无返回或者返回原始值类型，则将新实例返回</li></ol><h2 id="implement" tabindex="-1"><a class="header-anchor" href="#implement" aria-hidden="true">#</a> Implement</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token parameter">constructor<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1.创建一个空对象(即新实例)</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 2.将新实例的 \`[[prototype]]\` 属性指向构造函数 \`prototype\` 属性指向的对象</span>
  Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token comment">// 3.执行构造函数，并把 \`this\` 绑定到新实例上</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
  <span class="token comment">// 4.如果构造函数返回对象，则将这个对象返回；如果构造函数无返回或者返回原始值类型，则将新实例返回</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token function">New</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;eathyn&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> Refs</h2>`,6),u={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new#description",target:"_blank",rel:"noopener noreferrer"},d={href:"https://vue3js.cn/interview/JavaScript/new.html",target:"_blank",rel:"noopener noreferrer"};function k(m,v){const s=r("ExternalLinkIcon");return o(),p("div",null,[l,n("ul",null,[n("li",null,[n("a",u,[a("Creating Process"),e(s)])]),n("li",null,[n("a",d,[a("Implement new Operator"),e(s)])])])])}const b=t(i,[["render",k],["__file","index.html.vue"]]);export{b as default};
