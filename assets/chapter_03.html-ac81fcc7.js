const e=JSON.parse(`{"key":"v-3987ae84","path":"/front_end/typescript/book-learning_typescript/chapter_03.html","title":"Unions and Literals","lang":"zh-CN","frontmatter":{"date":"2022-10-07T00:00:00.000Z","category":"TypeScript","tag":["Book - Learning TypeScript","chapter 03"],"description":"Unions and Literals Union Types A union type will be one of constituents that construct it. Using | to constitute a union type. // the type of 'text' is a union type // it will be 'string' or 'undefined' let text: string | undefined = 'a'","head":[["meta",{"property":"og:url","content":"https://eathyn.github.io/blog/blog/front_end/typescript/book-learning_typescript/chapter_03.html"}],["meta",{"property":"og:title","content":"Unions and Literals"}],["meta",{"property":"og:description","content":"Unions and Literals Union Types A union type will be one of constituents that construct it. Using | to constitute a union type. // the type of 'text' is a union type // it will be 'string' or 'undefined' let text: string | undefined = 'a'"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"Book - Learning TypeScript"}],["meta",{"property":"article:tag","content":"chapter 03"}],["meta",{"property":"article:published_time","content":"2022-10-07T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Unions and Literals\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-07T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Union Types","slug":"union-types","link":"#union-types","children":[{"level":3,"title":"Union Properties","slug":"union-properties","link":"#union-properties","children":[]}]},{"level":2,"title":"Narrowing","slug":"narrowing","link":"#narrowing","children":[{"level":3,"title":"Assignment Narrowing","slug":"assignment-narrowing","link":"#assignment-narrowing","children":[]},{"level":3,"title":"Conditional Narrowing","slug":"conditional-narrowing","link":"#conditional-narrowing","children":[]},{"level":3,"title":"Typeof Checks","slug":"typeof-checks","link":"#typeof-checks","children":[]}]},{"level":2,"title":"Literal Types","slug":"literal-types","link":"#literal-types","children":[{"level":3,"title":"Literal Assignability","slug":"literal-assignability","link":"#literal-assignability","children":[]}]},{"level":2,"title":"Strict Null Checking","slug":"strict-null-checking","link":"#strict-null-checking","children":[{"level":3,"title":"The Billion-Dollar Mistake","slug":"the-billion-dollar-mistake","link":"#the-billion-dollar-mistake","children":[]},{"level":3,"title":"Truthiness Narrowing","slug":"truthiness-narrowing","link":"#truthiness-narrowing","children":[]},{"level":3,"title":"Variables Without Initial Values","slug":"variables-without-initial-values","link":"#variables-without-initial-values","children":[]}]},{"level":2,"title":"Type Alias","slug":"type-alias","link":"#type-alias","children":[{"level":3,"title":"Type Aliases Are Not JavaScript","slug":"type-aliases-are-not-javascript","link":"#type-aliases-are-not-javascript","children":[]},{"level":3,"title":"Combining Type Aliases","slug":"combining-type-aliases","link":"#combining-type-aliases","children":[]}]}],"git":{},"readingTime":{"minutes":1.61,"words":482},"filePathRelative":"front_end/typescript/book-learning_typescript/chapter_03.md","localizedDate":"2022年10月7日","excerpt":"<h1> Unions and Literals</h1>\\n<h2> Union Types</h2>\\n<ul>\\n<li>A union type will be one of constituents that construct it.</li>\\n<li>Using <code>|</code> to constitute a union type.</li>\\n</ul>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">// the type of 'text' is a union type</span>\\n<span class=\\"token comment\\">// it will be 'string' or 'undefined'</span>\\n<span class=\\"token keyword\\">let</span> text<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">undefined</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'a'</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
