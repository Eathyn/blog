import{_ as t,W as o,X as p,Y as n,Z as a,$ as c,a0 as s,C as i}from"./framework-0d71bc9d.js";const l={},r=s(`<h1 id="skills" tabindex="-1"><a class="header-anchor" href="#skills" aria-hidden="true">#</a> Skills</h1><h2 id="non-promise-to-promise" tabindex="-1"><a class="header-anchor" href="#non-promise-to-promise" aria-hidden="true">#</a> Non-promise to Promise</h2><h3 id="background" tabindex="-1"><a class="header-anchor" href="#background" aria-hidden="true">#</a> Background</h3><ul><li><code>success</code> and <code>fail</code> in API like <code>wx.request</code> or <code>wx.uploadFile</code> are callbacks so the readability and maintainability is poor.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;test-url&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>It&#39;s better to return a promise so that we can use <code>await</code> keyword to deal with callback hell.</li></ul><h3 id="solution-1" tabindex="-1"><a class="header-anchor" href="#solution-1" aria-hidden="true">#</a> Solution-1</h3><ul><li>Encapsulating a function that returns a <code>promise</code>. In that <code>promise</code>, we can assign <code>resolve</code> and <code>reject</code> to <code>success</code> and <code>fail</code> respectively.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">wxToPromise</span><span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promsise</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>success <span class="token operator">=</span> resolve
    options<span class="token punctuation">.</span><span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    wx<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="solution-2" tabindex="-1"><a class="header-anchor" href="#solution-2" aria-hidden="true">#</a> Solution-2</h3>`,10),u={href:"https://github.com/wechat-miniprogram/miniprogram-api-promise",target:"_blank",rel:"noopener noreferrer"},d=s(`<h2 id="禁止滚动穿透" tabindex="-1"><a class="header-anchor" href="#禁止滚动穿透" aria-hidden="true">#</a> 禁止滚动穿透</h2><h3 id="background-1" tabindex="-1"><a class="header-anchor" href="#background-1" aria-hidden="true">#</a> Background</h3><ul><li>滑动弹窗的内容时，弹窗下层的内容也会跟着滑动。看起来好像是上面的滚动事件穿透到下面的 DOM 元素上一样，所以称之为滚动穿透</li></ul><h3 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> Solution</h3><ul><li>使用微信小程序的 <code>page-meta</code> 组件配置样式。当出现弹窗时，<code>page-meta</code> 的 <code>overflow</code> 属性设置为 <code>hidden</code>。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>page-meta</span> <span class="token attr-name">page-style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ showPopup ? &#39;overflow: hidden&#39; : &#39;&#39; }}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6);function k(h,m){const e=i("ExternalLinkIcon");return o(),p("div",null,[r,n("ul",null,[n("li",null,[a("Using "),n("a",u,[a("miniprogram-api-promise"),c(e)]),a(" package.")])]),d])}const b=t(l,[["render",k],["__file","index.html.vue"]]);export{b as default};
