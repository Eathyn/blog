import{_ as r,W as m,X as c,$ as s,Y as a,Z as e,a0 as n,C as i}from"./framework-0d71bc9d.js";const h={},p=n('<h1 id="binary-tree" tabindex="-1"><a class="header-anchor" href="#binary-tree" aria-hidden="true">#</a> Binary Tree</h1><h2 id="binary-tree-1" tabindex="-1"><a class="header-anchor" href="#binary-tree-1" aria-hidden="true">#</a> Binary Tree</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>二叉树（binary tree）：每个节点最多有两个子节点，即每个节点可以有 0 / 1 / 2 个子节点。</p><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3>',5),d=n('<h2 id="full-binary-tree" tabindex="-1"><a class="header-anchor" href="#full-binary-tree" aria-hidden="true">#</a> Full Binary Tree</h2><blockquote><p>[wiki](https://en.wikipedia.org/wiki/Binary_tree#:~:text=A-,full%20binary%20tree,-(sometimes%20referred%20to)</p></blockquote><h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1" aria-hidden="true">#</a> 概念</h3><ul><li>满二叉树（full binary tree）：每个节点都有零个或两个子节点。</li><li>full binary tree 又称作 proper / plane / strict binary tree。</li></ul><h3 id="例子-1" tabindex="-1"><a class="header-anchor" href="#例子-1" aria-hidden="true">#</a> 例子</h3><ul><li>tree-1 是满二叉树，因为每个节点都有零个或两个子节点。</li></ul>',6),o=a("ul",null,[a("li",null,"tree-2 不是满二叉树，因为节点 C 只有一个子节点。")],-1),u=a("h2",{id:"perfect-binary-tree",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#perfect-binary-tree","aria-hidden":"true"},"#"),e(" Perfect Binary Tree")],-1),g={href:"https://www.programiz.com/dsa/perfect-binary-tree",target:"_blank",rel:"noopener noreferrer"},y=a("h3",{id:"概念-2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#概念-2","aria-hidden":"true"},"#"),e(" 概念")],-1),b=a("p",null,"完美二叉树（perfect binary tree）：所有内部节点（即有子节点的节点）都有两个子节点且所有叶子节点都在同一层。",-1),k=a("h3",{id:"例子-2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#例子-2","aria-hidden":"true"},"#"),e(" 例子")],-1),x=a("ul",null,[a("li",null,"单个节点也属于完美二叉树，如 tree-1：")],-1),_=a("ul",null,[a("li",null,"tree-2 属于完美二叉树，因为所有内部节点（A）都有两个子节点且所有叶子节点（B/C）都在同一层。")],-1),w=a("ul",null,[a("li",null,"tree-3 属于完美二叉树，因为所有内部节点（A/B/C）都有两个子节点且所有叶子节点（D/E/F/G）都在同一层。")],-1),S=a("h2",{id:"complete-binary-tree",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#complete-binary-tree","aria-hidden":"true"},"#"),e(" Complete Binary Tree")],-1),f={href:"https://www.interviewcake.com/concept/java/complete-binary-tree",target:"_blank",rel:"noopener noreferrer"},E={href:"https://www.programiz.com/dsa/complete-binary-tree",target:"_blank",rel:"noopener noreferrer"},B=n('<h3 id="概念-3" tabindex="-1"><a class="header-anchor" href="#概念-3" aria-hidden="true">#</a> 概念</h3><p>完全二叉树（complete binary tree）需要满足两个条件：</p><ol><li>除了最后一层，其他层的节点都是满的，没有空余的位置。</li><li>最后一层的节点必须尽量的向左靠拢，节点的左边不能存在空余的位置。</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树。</p></div><h3 id="例子-3" tabindex="-1"><a class="header-anchor" href="#例子-3" aria-hidden="true">#</a> 例子</h3><ul><li>tree-1 是完全二叉树，满足了完全二叉树的两个条件。</li></ul>',6),v=a("ul",null,[a("li",null,"tree-2 不是完全二叉树，没有满足完全二叉树的第一个条件。")],-1),K=a("ul",null,[a("li",null,"tree-3 不是完全二叉树，没有满足完全二叉树的第二个条件。")],-1),J=a("h3",{id:"规律-1",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#规律-1","aria-hidden":"true"},"#"),e(" 规律-1")],-1),T=a("ul",null,[a("li",null,[e("用数组表示二叉树结构，假设 N 为节点的总数，"),a("code",null,"Math.floor(N / 2) - 1"),e(" 为最后一个非叶子节点的索引。")]),a("li",null,[e("最后一个非叶子节点的索引："),a("code",null,"Math.floor(6 / 2) - 1 = 2"),e("。")])],-1),M=n('<h2 id="balanced-binary-tree" tabindex="-1"><a class="header-anchor" href="#balanced-binary-tree" aria-hidden="true">#</a> Balanced Binary Tree</h2><h3 id="概念-4" tabindex="-1"><a class="header-anchor" href="#概念-4" aria-hidden="true">#</a> 概念</h3><p>平衡二叉树（balanced binary tree）又称为高度平衡二叉树（height-balanced binary tree），指的是每个内部节点的左子树和右子树的高度差不超过 1。</p><h3 id="例子-4" tabindex="-1"><a class="header-anchor" href="#例子-4" aria-hidden="true">#</a> 例子</h3>',4),O=a("ul",null,[a("li",null,[e("tree-1 是平衡二叉树： "),a("ul",null,[a("li",null,[e("A 的左右子树的高度差为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"∣"),a("mn",null,"1"),a("mo",null,"−"),a("mn",null,"1"),a("mi",{mathvariant:"normal"},"∣"),a("mo",null,"="),a("mn",null,"0")]),a("annotation",{encoding:"application/x-tex"},"|1 - 1| = 0")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"∣1"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"1∣"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"0")])])])]),a("li",null,[e("B 的左右子树的高度差为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"∣"),a("mn",null,"0"),a("mo",null,"−"),a("mn",null,"0"),a("mi",{mathvariant:"normal"},"∣"),a("mo",null,"="),a("mn",null,"0")]),a("annotation",{encoding:"application/x-tex"},"|0 - 0| = 0")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"∣0"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"0∣"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"0")])])])]),a("li",null,[e("C 的左右子树的高度差为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"∣"),a("mn",null,"0"),a("mo",null,"−"),a("mn",null,"0"),a("mi",{mathvariant:"normal"},"∣"),a("mo",null,"="),a("mn",null,"0")]),a("annotation",{encoding:"application/x-tex"},"|0 - 0| = 0")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"∣0"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"0∣"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"0")])])])])])])],-1),A=a("ul",null,[a("li",null,[e("tree-2 是平衡二叉树： "),a("ul",null,[a("li",null,[e("A 的左右子树的高度差为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"∣"),a("mn",null,"1"),a("mo",null,"−"),a("mn",null,"0"),a("mi",{mathvariant:"normal"},"∣"),a("mo",null,"="),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"|1 - 0| = 1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"∣1"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"0∣"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])])]),a("li",null,[e("B 的左右子树的高度差为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"∣"),a("mn",null,"0"),a("mo",null,"−"),a("mn",null,"0"),a("mi",{mathvariant:"normal"},"∣"),a("mo",null,"="),a("mn",null,"0")]),a("annotation",{encoding:"application/x-tex"},"|0 - 0| = 0")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"∣0"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"0∣"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"0")])])])])])])],-1),C=a("ul",null,[a("li",null,[e("tree-3 不是平衡二叉树： "),a("ul",null,[a("li",null,[e("A 的左右子树的高度差为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"∣"),a("mn",null,"2"),a("mo",null,"−"),a("mn",null,"0"),a("mi",{mathvariant:"normal"},"∣"),a("mo",null,"="),a("mn",null,"2")]),a("annotation",{encoding:"application/x-tex"},"|2 - 0| = 2")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"∣2"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"0∣"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"2")])])])]),a("li",null,[e("B 的左右子树的高度差为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",{mathvariant:"normal"},"∣"),a("mn",null,"1"),a("mo",null,"−"),a("mn",null,"0"),a("mi",{mathvariant:"normal"},"∣"),a("mo",null,"="),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"|1 - 0| = 1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"∣1"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),a("span",{class:"mord"},"0∣"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])])])])])],-1),Q=n('<h2 id="degenerate-tree" tabindex="-1"><a class="header-anchor" href="#degenerate-tree" aria-hidden="true">#</a> Degenerate Tree</h2><h3 id="概念-5" tabindex="-1"><a class="header-anchor" href="#概念-5" aria-hidden="true">#</a> 概念</h3><ul><li>退化树（degenerate tree）指的是每个内部节点只有一个子节点，形成类似单链表的结构。</li><li>退化树又称为 pathological tree。</li></ul><h3 id="例子-5" tabindex="-1"><a class="header-anchor" href="#例子-5" aria-hidden="true">#</a> 例子</h3>',4);function U(z,V){const l=i("Mermaid"),t=i("ExternalLinkIcon");return m(),c("div",null,[p,s(l,{id:"mermaid-15",code:"eJzT1dXlKsksyUm1UigpSk3VNeQCiaTl5JcnZyQWlSiEOHEpKDhyAQDfqwrM"}),s(l,{id:"mermaid-16",code:"eJzT1dXlKsksyUm1UigpSk3VNeICiaTl5JcnZyQWlSiEOHEpKDgq6OraKThxAQAlDgvn"}),s(l,{id:"mermaid-17",code:"eJzT1dXlKsksyUm1UigpSk3VNeYCiaTl5JcnZyQWlSiEOHEpKDgq6OraKSBYzlwApVoNjg=="}),d,s(l,{id:"mermaid-51",code:"eJzT1dXlKsksyUm1UigpSk3VNeQCiaTl5JcnZyQWlSiEOHEpKDgq6OraKSBYzkCWE5jlAme5AlmuYJYbnOXOBQBLnxQ4"}),o,s(l,{id:"mermaid-59",code:"eJxFyDsKgDAMANC9p8ioYBZHB8Hv6OQFRFMsBgs1It7etkPdHg8RlRhhqkAcEZYqjGb7rPviBOZWATSAWMOvzquN6pMGry5qTJrsRtl5M+e+LnmZYoE2zJWjrfDp7EHB6gMAGiM2"}),u,a("blockquote",null,[a("p",null,[a("a",g,[e("Blog"),s(t)])])]),y,b,k,x,s(l,{id:"mermaid-84",code:"eJzT1dXlKsksyUm1UigpSk3VNeQCiaTl5JcnZyQWlSiEOHEpKDhyAQDfqwrM"}),_,s(l,{id:"mermaid-92",code:"eJzT1dXlKsksyUm1UigpSk3VNeICiaTl5JcnZyQWlSiEOHEpKDgq6OraKSBYzlwApTMNjQ=="}),w,s(l,{id:"mermaid-100",code:"eJzT1dXlKsksyUm1UigpSk3VNeYCiaTl5JcnZyQWlSiEOHEpKDgq6OraKSBYzkCWE5jlAme5AlnOYJYbnOXOBQBMCRQ2"}),S,a("blockquote",null,[a("ul",null,[a("li",null,[a("a",f,[e("blog-1"),s(t)])]),a("li",null,[a("a",E,[e("blog-2"),s(t)])])])]),B,s(l,{id:"mermaid-151",code:"eJzT1dXlKsksyUm1UigpSk3VNeQCiaTl5JcnZyQWlSiEOHEpKDgq6OraKSBYzkCWE5jlAme5auSV5uRoAvnOYL4bGt8dygcAFlwaWA=="}),v,s(l,{id:"mermaid-159",code:"eJzT1dXlKsksyUm1UigpSk3VNeICiaTl5JcnZyQWlSiEOHEpKDgq6OraKSBYzhp5pTk5mkC+E5jvAme5wmWKSypzUhWcFdIyc3KsilJTdIAiRfnZqSA2FwADGx9p"}),K,s(l,{id:"mermaid-167",code:"eJzT1dXlKsksyUm1UigpSk3VNeYCiaTl5JcnZyQWlSiEOHEpKDgq6OraKSBYzkCWE5jll5+SqmuokVeak6MJF3QBspwR0kZwaSRBY7ggEBWXVOakQs1SSMvMybEqSk3RAQoX5WengthwNS7YpQGLRjYJ"}),J,T,s(l,{id:"mermaid-183",code:"eJxLy8kvT85ILCpRCHHiUlBwVNDVtVNAsJyBLCcwywXOcgWynMEsNzjLLz8lVSOvNCdHEygERMUllTmpQLm0zJwcq6LUFB2gSFF+diqIzQUABMwchg=="}),M,O,s(l,{id:"mermaid-220",code:"eJzT1dXlKsksyUm1UigpSk3VNeQCiaTl5JcnZyQWlSiEOHEpKDgq6OraKSBYzkCWE5jlAme5AlnOYJYbnOXOBQBLaxQ0"}),A,s(l,{id:"mermaid-240",code:"eJzT1dXlKsksyUm1UigpSk3VNeICiaTl5JcnZyQWlSiEOHEpKDgq6OraKSBYzkCWE5jlAme5cgEA1yoQ3g=="}),C,s(l,{id:"mermaid-260",code:"eJzT1dXlKsksyUm1UigpSk3VNeYCiaTl5JcnZyQWlSiEOHEpKDgq6OraKSBYzkCWE5jlAme5AlkuYJYbnJVXmpPDBQCNYBWs"}),Q,s(l,{id:"mermaid-282",code:"eJxLy8kvT85ILCpRCHHiUlBwVNDVtVPwy09J1TXUyCvNydGEC4KknRDSRnBpiKAzkOWMkDaGS0MEXYCs4pLKnFSgacn5OflFVgrlGZklqToKaZk5OVZJOaVAZnFJUX52KpgDV+5EmnJn0pS7EKccADYdWkk="})])}const Y=r(h,[["render",U],["__file","index.html.vue"]]);export{Y as default};
