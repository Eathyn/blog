import{_ as t,W as e,X as l,Y as n,Z as s,$ as o,a0 as i,C as c}from"./framework-0d71bc9d.js";const p={},u=i(`<h1 id="第一章-权衡的艺术" tabindex="-1"><a class="header-anchor" href="#第一章-权衡的艺术" aria-hidden="true">#</a> 第一章 权衡的艺术</h1><h2 id="_1-1-命令式和声明式" tabindex="-1"><a class="header-anchor" href="#_1-1-命令式和声明式" aria-hidden="true">#</a> 1.1 命令式和声明式</h2><ul><li>命令式 VS 声明式</li></ul><p><em>命令式</em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#my-button&#39;</span><span class="token punctuation">)</span>
button<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;this is a button&#39;</span>
button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>声明式</em></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
    <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-button<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>() =&gt; { console.log(&#39;hello world&#39;) }<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span>
    this is a button
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>命令式关注过程，声明式关注结果。Vue.js 帮助开发者实现了过程。</li></ul><h2 id="_1-2-性能与可维护性的权衡" tabindex="-1"><a class="header-anchor" href="#_1-2-性能与可维护性的权衡" aria-hidden="true">#</a> 1.2 性能与可维护性的权衡</h2><ul><li>命令式性能好，声明式可维护性好。Vue 就是在这两方面进行权衡。</li><li>声明式内部使用命令式，所以性能不比命令式好。</li><li>为了实现最优的更新性能，Vue 需要找到前后的差异并只更新变化的部分。</li><li>声明式比命令式多出查找差异的性能消耗。</li><li>声明式框架要做的是在保持可维护性的同时，让查找差异的性能消耗最小化。</li></ul><h2 id="_1-3-虚拟-dom-的性能到底如何" tabindex="-1"><a class="header-anchor" href="#_1-3-虚拟-dom-的性能到底如何" aria-hidden="true">#</a> 1.3 虚拟 DOM 的性能到底如何</h2>`,11),r=n("li",null,"虚拟 DOM 就是为了让查找差异的性能消耗最小化。",-1),d={href:"https://jsbench.me/",target:"_blank",rel:"noopener noreferrer"},k=n("li",null,"DOM 的计算要比 JS 的计算耗费更多性能。",-1),h=n("li",null,"在创建页面的时，innerHTML 和虚拟 DOM 都需要新建所有 DOM 元素，因此耗费的性能差不多。在更新页面时，innerHTML 需要销毁并重新创建所有 DOM，而虚拟 DOM 只需要更新存在差异的 DOM，因此虚拟 DOM 耗费的性能比 innerHTML 小得多。",-1),_=n("li",null,"虚拟 DOM 的性能与前后的差异相关；innerHTML 的性能与模板大小相关。",-1),v=n("li",null,[s("innerHTML vs 虚拟 DOM vs 原生 JS: "),n("ul",null,[n("li",null,"innerHTML: 心智负担中等，性能差"),n("li",null,"虚拟 DOM: 心智负担小，可维护性强，性能中等"),n("li",null,"原生 JS: 心智负担大，可维护性弱，性能好")])],-1),m=n("h2",{id:"_1-4-运行时和编译时",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-4-运行时和编译时","aria-hidden":"true"},"#"),s(" 1.4 运行时和编译时")],-1),b=n("ul",null,[n("li",null,[s("框架有三种设计选择 "),n("ul",null,[n("li",null,"纯运行时"),n("li",null,"运行时+编译时"),n("li",null,"纯编译时")])])],-1),g=n("p",null,"Q: 部分内容看不懂，先跳过",-1);function M(f,x){const a=c("ExternalLinkIcon");return e(),l("div",null,[u,n("ul",null,[r,n("li",null,[s("可以使用 "),n("a",d,[s("JSBench"),o(a)]),s(" 测试 JS 性能。")]),k,h,_,v]),m,b,g])}const O=t(p,[["render",M],["__file","01-权衡的艺术.html.vue"]]);export{O as default};
