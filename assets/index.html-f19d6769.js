import{_ as l,W as i,X as r,Y as n,Z as s,$ as a,a1 as u,a0 as o,C as p}from"./framework-0d71bc9d.js";const d={},k=n("h1",{id:"heap-sort",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#heap-sort","aria-hidden":"true"},"#"),s(" Heap Sort")],-1),h=n("h2",{id:"原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原理","aria-hidden":"true"},"#"),s(" 原理")],-1),v=n("p",null,"Reference:",-1),m={href:"https://youtu.be/2DmK_H7IdTo",target:"_blank",rel:"noopener noreferrer"},b={href:"https://youtu.be/MtQL_ll5KhQ",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.programiz.com/dsa/heap-sort",target:"_blank",rel:"noopener noreferrer"},x=n("h2",{id:"实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实现","aria-hidden":"true"},"#"),s(" 实现")],-1),f=n("h3",{id:"将数组想象为二叉堆",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#将数组想象为二叉堆","aria-hidden":"true"},"#"),s(" 将数组想象为二叉堆")],-1),_=o(`<h3 id="将二叉堆转化为大根堆" tabindex="-1"><a class="header-anchor" href="#将二叉堆转化为大根堆" aria-hidden="true">#</a> 将二叉堆转化为大根堆</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> arrLen<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> largestIdx <span class="token operator">=</span> index
  <span class="token keyword">const</span> leftIdx <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token keyword">const</span> rightIdx <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span>

  <span class="token comment">// 左子节点存在且左子节点的值大于其父节点的值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>leftIdx <span class="token operator">&lt;</span> arrLen <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>leftIdx<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>largestIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    largestIdx <span class="token operator">=</span> leftIdx
  <span class="token punctuation">}</span>
  <span class="token comment">// 右子节点存在且右子节点的值大于其父节点的值</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rightIdx <span class="token operator">&lt;</span> arrLen <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>rightIdx<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>largestIdx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    largestIdx <span class="token operator">=</span> rightIdx
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> largestIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>largestIdx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>largestIdx<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token comment">// 因为交换位置后原来的大根堆可能变成了非大根堆，所以需要把它变为大根堆</span>
    <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arrLen<span class="token punctuation">,</span> largestIdx<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 构建大根堆</span>
  <span class="token keyword">const</span> arrLen <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
  <span class="token comment">// \`Math.floor(arr.length / 2) - 1\` 是最后一个非叶子节点的索引</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arrLen<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),y=n("code",null,"heapify(arr, arrLen, largestIdx)",-1),I=n("ul",null,[n("li",null,"1 和 6 执行交换之前，6 | 3 | 2 已经形成大根堆。")],-1),L=n("ul",null,[n("li",null,[s("1 和 6 执行交换之后，因为之前由 6 | 3 | 2 形成的大根堆现在变成了 1 | 3 | 2 非大根堆，所以需要执行 "),n("code",null,"heapify(arr, arrLen, largestIdx)"),s(" 把它们重新变成大根堆。")])],-1),w=n("ul",null,[n("li",null,[s("1 | 3 | 2 执行 "),n("code",null,"heapify(arr, arrLen, largestIdx)"),s(" 之后。")])],-1),E=o(`<h3 id="将大根堆进行堆排序" tabindex="-1"><a class="header-anchor" href="#将大根堆进行堆排序" aria-hidden="true">#</a> 将大根堆进行堆排序</h3><ul><li>算法思想： <ol><li>构建大根堆。</li><li>交换第一项和未排序部分的最后一项。</li><li>重回第一步，直到未排序部分只剩一项。</li></ol></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 从最后一个非叶子节点开始，往前构建大根堆</span>
  <span class="token keyword">const</span> arrLen <span class="token operator">=</span> arr<span class="token punctuation">.</span>length
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arrLen<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 堆排序</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arrLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 排除已排序部分，对未排序部分进行首尾交换</span>
    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token comment">// 排除已排序部分，对未排序部分构建大根堆</span>
    <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>heapify(arr, i, 0)</code> 第二个参数传递 <code>i</code> 非常巧妙，可以在不修改原数组的情况下排除掉已排序的部分。</li></ul><h2 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h2><ul><li>最好：O(N * logN)</li><li>最坏：O(N * logN)</li><li>平均：O(N * logN)</li></ul><h2 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度" aria-hidden="true">#</a> 空间复杂度</h2><ul><li>O(1)</li></ul>`,8);function U(G,B){const t=p("ExternalLinkIcon"),c=p("RouterLink"),e=p("Mermaid");return i(),r("div",null,[k,h,n("blockquote",null,[v,n("ul",null,[n("li",null,[n("a",m,[s("heap sort in 4 minutes"),a(t)])]),n("li",null,[n("a",b,[s("heap sort | GeeksForGeeks"),a(t)])]),n("li",null,[n("a",g,[s("heap sort algorithm"),a(t)])])])]),x,f,n("ul",null,[n("li",null,[a(c,{to:"/cs/dsa/non-linear_structure/tree/heap/priority_queue/#%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0%E5%A0%86"},{default:u(()=>[s("使用数组实现堆")]),_:1})])]),_,n("ul",null,[n("li",null,[y,s(" 代码解释： "),I,a(e,{id:"mermaid-57",code:"eJxLy8kvT85ILCpRCHHiUlDIy09J1TU00jA00lTQ1bWD8jUMNXHKGWgYGiBkgSoRcmYaZjhkTDVMETJgExBylhqWOOUsNCzgciDTETLGGsY4ZIw0jEAyQFRcUpmTCjVYIS0zJ8eqKDVFByhclJ+dapWUk5icjarKDKKqIDMvG58yY+KUGeFUBgAniG28"}),L,a(e,{id:"mermaid-65",code:"eJxLy8kvT85ILCpRCHHiUlDIy09J1TU00jA00lTQ1bWD8M00zDRxyRkaaBgawGVBKpHkNAxxyJhqmCJMBJuAkLPUsMQpZ6FhgZADmo6QMdYwxiFjpGEEkgGi4pLKnFSoEoW0zJwcq6LUFB2gcFF+dqpVUk5icjaqKjOIqoLMvGx8yoyJU2aEUxkAMihtvA=="}),w,a(e,{id:"mermaid-73",code:"eJxLy8kvT85ILCpRCHHiystPSdU1NNIwNNJU0NW1UwDzzTTMNLHLGBpoGBpA5UCqEDLGGsZYxU01TGFmgfUiZCw1LHHIWGhYQGVApiLZrmGIVdxIw0iTi6u4pDInFapQIS0zJ8eqKDVFR6G4pCg/O9UqKScxORtZjRlETUFmXjZuRcbEKDLCqQgAIPtqhA=="})])]),E])}const T=l(d,[["render",U],["__file","index.html.vue"]]);export{T as default};
