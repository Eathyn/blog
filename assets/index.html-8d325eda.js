import{_ as l,W as r,X as o,Y as e,Z as i,$ as s,a0 as d,C as t}from"./framework-0d71bc9d.js";const h={},n=d('<h1 id="composables" tabindex="-1"><a class="header-anchor" href="#composables" aria-hidden="true">#</a> Composables</h1><h2 id="why-do-we-need-composables" tabindex="-1"><a class="header-anchor" href="#why-do-we-need-composables" aria-hidden="true">#</a> Why do we need composables</h2><h3 id="disadvantages-of-mixin" tabindex="-1"><a class="header-anchor" href="#disadvantages-of-mixin" aria-hidden="true">#</a> Disadvantages of Mixin</h3><ul><li>需要跳转到 mixin 对象所在的文件才能知道导入了哪些属性和方法</li><li>导入多个 mixin 对象可能导致命名冲突</li><li>mixin 对象和组件可能导致命名冲突</li><li>导入多个 mixin 对象造成的命名冲突可能会导致隐式的跨 mixin 通信</li></ul><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><h3 id="stateful-stateless" tabindex="-1"><a class="header-anchor" href="#stateful-stateless" aria-hidden="true">#</a> stateful / stateless</h3><ul><li>stateful (有状态的) : 函数运行时维护着内部状态，例如 composables</li><li>stateless (无状态的) : 函数运行时没有维护着内部状态，例如 lodash</li></ul><h3 id="composables-1" tabindex="-1"><a class="header-anchor" href="#composables-1" aria-hidden="true">#</a> composables</h3><ul><li>composable : 使用 composition api 封装和复用有状态逻辑的函数</li></ul><h2 id="约定和最佳实践" tabindex="-1"><a class="header-anchor" href="#约定和最佳实践" aria-hidden="true">#</a> 约定和最佳实践</h2><h3 id="命名" tabindex="-1"><a class="header-anchor" href="#命名" aria-hidden="true">#</a> 命名</h3><ul><li>驼峰命名法</li><li>以 <code>use</code> 开头</li></ul><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><ul><li>参数尽量使用 ref</li></ul><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h3><ul><li>返回包含 ref 的对象</li></ul><h3 id="副作用" tabindex="-1"><a class="header-anchor" href="#副作用" aria-hidden="true">#</a> 副作用</h3><ul><li>如果 composable 有产生副作用(事件/获取数据)，要使用 onUnmounted 删除副作用</li></ul><h3 id="使用限制" tabindex="-1"><a class="header-anchor" href="#使用限制" aria-hidden="true">#</a> 使用限制</h3><ul><li>composable 应该在 <code>&lt;script setup&gt;</code> 或 <code>setup()</code> 中同步地调用，也可以在 hooks 中调用</li></ul><h2 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> Refs</h2>',21),c={href:"https://vuejs.org/guide/reusability/composables.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://vueschool.io/articles/vuejs-tutorials/what-is-a-vue-js-composable/",target:"_blank",rel:"noopener noreferrer"};function f(m,b){const a=t("ExternalLinkIcon");return r(),o("div",null,[n,e("ul",null,[e("li",null,[e("a",c,[i("Composables"),s(a)])]),e("li",null,[e("a",u,[i("Composable vs. Mixin"),s(a)])])])])}const x=l(h,[["render",f],["__file","index.html.vue"]]);export{x as default};
