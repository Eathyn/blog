import{_ as t,W as l,X as a,Y as e,Z as n,$ as o,a0 as s,C as r}from"./framework-0d71bc9d.js";const c="/blog/assets/result-f716f7fb.png",d="/blog/assets/venn_diagram-168a9968.png",u="/blog/assets/result-fd43ff2f.png",p="/blog/assets/venn_common-d0ad48b9.png",g="/blog/assets/venn_only-6eb24466.png",h="/blog/assets/result-efa40753.png",f="/blog/assets/venn_common-e1153bd4.png",_="/blog/assets/venn_only-c73556b6.png",m="/blog/assets/result-a947d876.png",b="/blog/assets/venn-d9c2ca86.png",v="/blog/assets/cartesian_product-bb1e4935.png",k="/blog/assets/summary-3a830e33.png",w={},q=e("h1",{id:"join-tables",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#join-tables","aria-hidden":"true"},"#"),n(" Join Tables")],-1),x=e("h2",{id:"inner-join",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inner-join","aria-hidden":"true"},"#"),n(" Inner Join")],-1),y=e("p",null,"Reference",-1),N={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-joins/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-inner-join/",target:"_blank",rel:"noopener noreferrer"},J=s('<ul><li><code>Inner Join</code>：两个表中相同的部分组成一个新表。</li></ul><figure><img src="'+c+'" alt="结果" height="100" tabindex="0" loading="lazy"><figcaption>结果</figcaption></figure><ul><li>韦恩图</li></ul><figure><img src="'+d+'" alt="Inner Join" height="150" tabindex="0" loading="lazy"><figcaption>Inner Join</figcaption></figure><h2 id="left-join" tabindex="-1"><a class="header-anchor" href="#left-join" aria-hidden="true">#</a> Left Join</h2>',5),R=e("p",null,"Reference",-1),T={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-joins/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-left-join/",target:"_blank",rel:"noopener noreferrer"},I=s('<ul><li><code>Left Join</code>：新表包含左表的所有数据。如果值相同，则在对应行填充表的数据；如果值不相同，则在对应行填充 <code>NULL</code>。</li></ul><figure><img src="'+u+'" alt="结果" height="150" tabindex="0" loading="lazy"><figcaption>结果</figcaption></figure><ul><li>韦恩图</li></ul><figure><img src="'+p+'" alt="左表和右表有共同的数据" height="150" tabindex="0" loading="lazy"><figcaption>左表和右表有共同的数据</figcaption></figure><figure><img src="'+g+'" alt="左表和右表没有共同的数据" height="150" tabindex="0" loading="lazy"><figcaption>左表和右表没有共同的数据</figcaption></figure><h2 id="right-join" tabindex="-1"><a class="header-anchor" href="#right-join" aria-hidden="true">#</a> Right Join</h2>',6),L=e("p",null,"Reference",-1),E={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-joins/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-right-join/",target:"_blank",rel:"noopener noreferrer"},C=s('<ul><li><code>Right Join</code>：新表包含右表的所有数据。如果值相同，则在对应行填充表的数据；如果值不相同，则在对应行填充 <code>NULL</code>。</li></ul><figure><img src="'+h+'" alt="结果" height="150" tabindex="0" loading="lazy"><figcaption>结果</figcaption></figure><ul><li>韦恩图</li></ul><figure><img src="'+f+'" alt="右表和左表有共同的数据" height="150" tabindex="0" loading="lazy"><figcaption>右表和左表有共同的数据</figcaption></figure><figure><img src="'+_+'" alt="右表和左表没有共同的数据" height="150" tabindex="0" loading="lazy"><figcaption>右表和左表没有共同的数据</figcaption></figure><h2 id="full-outer-join" tabindex="-1"><a class="header-anchor" href="#full-outer-join" aria-hidden="true">#</a> Full Outer Join</h2>',6),F={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-full-outer-join/",target:"_blank",rel:"noopener noreferrer"},S=s('<ul><li><code>Full Outer Join</code>：新表包含左右表的所有数据。如果值相同，则在对应行填充表的数据；如果值不相同，则在对应行填充 <code>NULL</code>。</li></ul><figure><img src="'+m+'" alt="result" height="200" tabindex="0" loading="lazy"><figcaption>result</figcaption></figure><ul><li>韦恩图</li></ul><figure><img src="'+b+'" alt="Full Outer Join" height="150" tabindex="0" loading="lazy"><figcaption>Full Outer Join</figcaption></figure><h2 id="cross-join" tabindex="-1"><a class="header-anchor" href="#cross-join" aria-hidden="true">#</a> Cross Join</h2>',5),U={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-cross-join/",target:"_blank",rel:"noopener noreferrer"},A=s('<ul><li>形成笛卡尔积（Cartesian Product），即表 A 的每一行和表 B 的每一行形成新的行。</li></ul><figure><img src="'+v+`" alt="笛卡尔积" height="190" tabindex="0" loading="lazy"><figcaption>笛卡尔积</figcaption></figure><ul><li><code>cross join</code> 不需要 <code>ON</code> 子句。</li></ul><div class="language-plsql line-numbers-mode" data-ext="plsql"><pre class="language-plsql"><code><span class="token keyword">SELECT</span> select_list
<span class="token keyword">FROM</span> T1
CROSS JOIN T2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="natural-join" tabindex="-1"><a class="header-anchor" href="#natural-join" aria-hidden="true">#</a> Natural Join</h2>`,5),B={href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-natural-join/",target:"_blank",rel:"noopener noreferrer"},M=s(`<ul><li><code>natural join</code> 指的是根据两个表中共同的列（common column）创建隐式的 <code>join</code> 语句。</li></ul><div class="language-plsql line-numbers-mode" data-ext="plsql"><pre class="language-plsql"><code><span class="token keyword">SELECT</span> select_list
<span class="token keyword">FROM</span> T1
NATURAL JOIN T2<span class="token punctuation">;</span>

<span class="token comment">-- 相当于：</span>
<span class="token keyword">SELECT</span> select_list
<span class="token keyword">FROM</span> T1
INNER JOIN T2
<span class="token keyword">USING</span><span class="token punctuation">(</span>common_column_name<span class="token punctuation">)</span>

<span class="token comment">-- 相当于：</span>
<span class="token keyword">SELECT</span> select_list
<span class="token keyword">FROM</span> T1
INNER JOIN T2
  <span class="token keyword">ON</span> T1<span class="token punctuation">.</span>common_column_name <span class="token operator">=</span> T2<span class="token punctuation">.</span>common_column_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在 <code>NATURAL [INNER, LEFT, RIGHT] JOIN T2</code> 中，默认值为 <code>INNER</code>。</li></ul><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><figure><img src="`+k+'" alt="总结" height="400" tabindex="0" loading="lazy"><figcaption>总结</figcaption></figure>',5);function V(G,H){const i=r("ExternalLinkIcon");return l(),a("div",null,[q,x,e("blockquote",null,[y,e("ul",null,[e("li",null,[e("a",N,[n("Overview"),o(i)])]),e("li",null,[e("a",j,[n("Inner Join"),o(i)])])])]),J,e("blockquote",null,[R,e("ul",null,[e("li",null,[e("a",T,[n("Overview"),o(i)])]),e("li",null,[e("a",O,[n("Left Join"),o(i)])])])]),I,e("blockquote",null,[L,e("ul",null,[e("li",null,[e("a",E,[n("Overview"),o(i)])]),e("li",null,[e("a",z,[n("Right Join"),o(i)])])])]),C,e("blockquote",null,[e("p",null,[n("Reference: "),e("a",F,[n("Full Outer Join"),o(i)])])]),S,e("blockquote",null,[e("p",null,[n("Reference: "),e("a",U,[n("Cross Join"),o(i)])])]),A,e("blockquote",null,[e("p",null,[n("Reference: "),e("a",B,[n("Natural Join"),o(i)])])]),M])}const W=t(w,[["render",V],["__file","index.html.vue"]]);export{W as default};
