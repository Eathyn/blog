import{_ as s,W as n,X as a,a0 as e}from"./framework-c8ebc670.js";const t={},i=e(`<h1 id="unions-and-literals" tabindex="-1"><a class="header-anchor" href="#unions-and-literals" aria-hidden="true">#</a> Unions and Literals</h1><h2 id="union-types" tabindex="-1"><a class="header-anchor" href="#union-types" aria-hidden="true">#</a> Union Types</h2><ul><li>A union type will be one of constituents that construct it.</li><li>Using <code>|</code> to constitute a union type.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// the type of &#39;text&#39; is a union type</span>
<span class="token comment">// it will be &#39;string&#39; or &#39;undefined&#39;</span>
<span class="token keyword">let</span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="union-properties" tabindex="-1"><a class="header-anchor" href="#union-properties" aria-hidden="true">#</a> Union Properties</h3><ul><li>TypeScript will throw error if one of the types does not have some property / method.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Error: Property &#39;toUpperCase&#39; does not exist on type &#39;number&#39;.</span>
  text<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="narrowing" tabindex="-1"><a class="header-anchor" href="#narrowing" aria-hidden="true">#</a> Narrowing</h2><h3 id="assignment-narrowing" tabindex="-1"><a class="header-anchor" href="#assignment-narrowing" aria-hidden="true">#</a> Assignment Narrowing</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>
<span class="token comment">// assignment narrows &#39;string | number&#39; to &#39;string&#39;</span>
text <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span>
text<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="conditional-narrowing" tabindex="-1"><a class="header-anchor" href="#conditional-narrowing" aria-hidden="true">#</a> Conditional Narrowing</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> text<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>
text <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">===</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typeof-checks" tabindex="-1"><a class="header-anchor" href="#typeof-checks" aria-hidden="true">#</a> Typeof Checks</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> text <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token string">&#39;hi&#39;</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> text <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  text<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  text<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="literal-types" tabindex="-1"><a class="header-anchor" href="#literal-types" aria-hidden="true">#</a> Literal Types</h2><ul><li>Literal types are more specific versions of primitive types.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// type of &#39;a&#39; is &#39;string&#39;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;text&#39;</span>

<span class="token comment">// type of &#39;b&#39; is &#39;text&#39;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">&#39;text&#39;</span>

<span class="token comment">// type of &#39;c&#39; is &#39;text&#39;</span>
<span class="token keyword">let</span> c<span class="token operator">:</span> <span class="token string">&#39;text&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Union can mix and match between literals and primitives.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token string">&#39;hi&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;hello&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="literal-assignability" tabindex="-1"><a class="header-anchor" href="#literal-assignability" aria-hidden="true">#</a> Literal Assignability</h3><ul><li>Different literal types within the same primitive type are not assignable to each other.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Error: Type &#39;&quot;hello&quot;&#39; is not assignable to type &#39;&quot;hi&quot;&#39;.</span>
<span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token string">&#39;hi&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Literal types allowed to be assigned to their corresponding primitive types.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span>
<span class="token keyword">let</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="strict-null-checking" tabindex="-1"><a class="header-anchor" href="#strict-null-checking" aria-hidden="true">#</a> Strict Null Checking</h2><h3 id="the-billion-dollar-mistake" tabindex="-1"><a class="header-anchor" href="#the-billion-dollar-mistake" aria-hidden="true">#</a> The Billion-Dollar Mistake</h3><ul><li>The billion-dollar mistake is that type systems allowing <code>null</code> value to be used in places that require a different type.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="truthiness-narrowing" tabindex="-1"><a class="header-anchor" href="#truthiness-narrowing" aria-hidden="true">#</a> Truthiness Narrowing</h3><ul><li><p>falsy value: false, 0, -0, 0n, &quot;&quot;, null, undefined.</p></li><li><p>TypeScript can also narrow a variable’s type from a truthiness check if only some of its potential values may be truthy.</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token string">&#39;ok&#39;</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// truthiness narrowing</span>
  a<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Error: Object is possibly &#39;undefined&#39;.</span>
a<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Logical operators support truthiness narrowing.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token string">&#39;ok&#39;</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>

a <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
a<span class="token operator">?.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="variables-without-initial-values" tabindex="-1"><a class="header-anchor" href="#variables-without-initial-values" aria-hidden="true">#</a> Variables Without Initial Values</h3><ul><li>TypeScript will throw error if you use a variable that doesn&#39;t have an initial value.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">string</span>
a<span class="token operator">?.</span>length <span class="token comment">// Variable &#39;a&#39; is used before being assigned.</span>
a <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-alias" tabindex="-1"><a class="header-anchor" href="#type-alias" aria-hidden="true">#</a> Type Alias</h2><ul><li>Type alias makes the type name shorter and easier to reuse.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// without type alias</span>
<span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> bigint <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">let</span> b<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> bigint <span class="token operator">=</span> <span class="token number">2</span>

<span class="token comment">// with type alias</span>
<span class="token keyword">type</span> <span class="token class-name">CustomType</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> bigint
<span class="token keyword">let</span> c<span class="token operator">:</span> CustomType <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">let</span> d<span class="token operator">:</span> CustomType <span class="token operator">=</span> <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="type-aliases-are-not-javascript" tabindex="-1"><a class="header-anchor" href="#type-aliases-are-not-javascript" aria-hidden="true">#</a> Type Aliases Are Not JavaScript</h3><ul><li>Type aliases are purely in the type system, you cannot reference them in runtime code.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">CustomType</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span>
<span class="token comment">// Error: &#39;CustomType&#39; only refers to a type, but is being used as a value here.</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>CustomType<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="combining-type-aliases" tabindex="-1"><a class="header-anchor" href="#combining-type-aliases" aria-hidden="true">#</a> Combining Type Aliases</h3><ul><li>Type alias can reference other type alias.</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">ID</span></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span>
<span class="token keyword">type</span> <span class="token class-name">MayBeID</span> <span class="token operator">=</span> <span class="token constant">ID</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,45),p=[i];function o(l,r){return n(),a("div",null,p)}const d=s(t,[["render",o],["__file","chapter_03.html.vue"]]);export{d as default};
