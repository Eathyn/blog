import{_ as s,W as i,X as t,Y as a,Z as n,$ as o,a0 as c,C as l}from"./framework-c8ebc670.js";const d="/blog/assets/concept-11b21d48.png",r="/blog/assets/force_cache_result_1-5328bbee.png",p="/blog/assets/force_cache_result_2-6d1bfde8.png",u="/blog/assets/concept-24faf844.png",h="/blog/assets/last_modified-89303b2a.png",f="/blog/assets/summary-58e14fda.png",g={},k=c('<h1 id="cache" tabindex="-1"><a class="header-anchor" href="#cache" aria-hidden="true">#</a> Cache</h1><h2 id="原因" tabindex="-1"><a class="header-anchor" href="#原因" aria-hidden="true">#</a> 原因</h2><ul><li>没有修改过的资源不需要重复向服务器获取，直接从缓存中获取可以更快地展示页面</li></ul><h2 id="强制缓存" tabindex="-1"><a class="header-anchor" href="#强制缓存" aria-hidden="true">#</a> 强制缓存</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><ul><li>服务器设置 <code>Cache-Control</code>，后续针对该请求，浏览器直接从缓存中获取数据，不需要通过服务器</li></ul><figure><img src="'+d+`" alt="force cache concept" tabindex="0" loading="lazy"><figcaption>force cache concept</figcaption></figure><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><ul><li>前端</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&#39;include&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>后端</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&#39;Cache-Control&#39;</span><span class="token operator">:</span> <span class="token string">&#39;max-age=604800&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结果" tabindex="-1"><a class="header-anchor" href="#结果" aria-hidden="true">#</a> 结果</h3><ul><li>第一次请求从服务器获取数据</li></ul><figure><img src="`+r+'" alt="force_cache_result_1.png" tabindex="0" loading="lazy"><figcaption>force_cache_result_1.png</figcaption></figure><ul><li>第二次请求开始从缓存获取数据</li></ul><figure><img src="'+p+'" alt="force_cache_result_2.png" tabindex="0" loading="lazy"><figcaption>force_cache_result_2.png</figcaption></figure><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><ul><li>静态资源适合缓存，如图片</li><li>Cache-Control : max-age=xx -&gt; 在 xx 秒之内，数据从缓存里读取</li><li>Cache-Control : no-store -&gt; 数据从服务器读取</li><li>Cache-Control : no-cache -&gt; 数据没有改变就从缓存中读取，有改变则从服务器读取</li><li>Cache-Control : private -&gt; 数据只能缓存在用户的浏览器</li><li>Cache-Control : public -&gt; 数据可以缓存在浏览器和代理等中间设备</li></ul><h2 id="协商-对比缓存" tabindex="-1"><a class="header-anchor" href="#协商-对比缓存" aria-hidden="true">#</a> 协商/对比缓存</h2><h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1" aria-hidden="true">#</a> 概念</h3><ul><li>服务器判断浏览器缓存里的资源是否和服务器一致，若一致则返回 304，浏览器从缓存中获取资源；不一致则返回 200 和新资源</li></ul><figure><img src="'+u+'" alt="negotiation cache" tabindex="0" loading="lazy"><figcaption>negotiation cache</figcaption></figure><h3 id="过程" tabindex="-1"><a class="header-anchor" href="#过程" aria-hidden="true">#</a> 过程</h3><h4 id="last-modified-if-modified-since" tabindex="-1"><a class="header-anchor" href="#last-modified-if-modified-since" aria-hidden="true">#</a> Last-Modified / If-Modified-Since</h4><ul><li><code>Last-Modified</code> 和 <code>If-Modified-Since</code> 的值是表示时间的字符串</li></ul><ol><li>浏览器初次请求，服务器返回资源和 <code>Last-Modified</code>，浏览器把该资源缓存下来</li><li>浏览器再次请求时携带 <code>If-Modified-Since</code> 头部</li><li>服务器收到请求后对比 <code>Last-Modified</code> 和 <code>If-Modified-Since</code>，如果两者相同说明资源没有更新，返回 304 响应状态码，浏览器从缓存中获取资源；如果两者不同说明资源已更新，返回新资源和新 <code>Last-Modified</code></li></ol><figure><img src="'+h+'" alt="last-modified and if-modified-since" tabindex="0" loading="lazy"><figcaption>last-modified and if-modified-since</figcaption></figure><h4 id="etag-if-none-match" tabindex="-1"><a class="header-anchor" href="#etag-if-none-match" aria-hidden="true">#</a> Etag / If-None-Match</h4><ul><li><code>Etag</code> / <code>If-None-Match</code> 的值是表示资源特定版本的标识符</li><li>过程与 <code>Last-Modified</code> 和 <code>If-Modified-Since</code> 类似</li></ul><h3 id="注意-1" tabindex="-1"><a class="header-anchor" href="#注意-1" aria-hidden="true">#</a> 注意</h3><ul><li><code>Last-Modified</code> 没有 <code>Etag</code> 精准</li><li>优先选择 <code>Etag</code>，<code>Last-Modified</code> 作为备用方案</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><figure><img src="'+f+'" alt="summary" tabindex="0" loading="lazy"><figcaption>summary</figcaption></figure><h2 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> Refs</h2>',35),m={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control",target:"_blank",rel:"noopener noreferrer"},b=a("h2",{id:"translation",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#translation","aria-hidden":"true"},"#"),n(" Translation")],-1),_=a("ul",null,[a("li",null,"强制缓存 : strong cache"),a("li",null,"协商缓存 : negotiation cache")],-1);function v(x,y){const e=l("ExternalLinkIcon");return i(),t("div",null,[k,a("ul",null,[a("li",null,[a("a",m,[n("no-store vs. no-cache"),o(e)])])]),b,_])}const M=s(g,[["render",v],["__file","index.html.vue"]]);export{M as default};
