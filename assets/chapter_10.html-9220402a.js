const e=JSON.parse('{"key":"v-1303da22","path":"/front_end/typescript/book-learning_typescript/chapter_10.html","title":"Generics","lang":"zh-CN","frontmatter":{"date":"2022-12-28T00:00:00.000Z","category":"TypeScript","tag":["Book - Learning TypeScript","chapter 10"],"description":"Generics The reason to use generics: a piece of code may be intended to work with various different types depending on how it’s called Generics may be declared using &lt; and &gt; brackets. Type parameters: T, U and UserInput in the demo below Type arguments: boolean, number and string in the demo below","head":[["meta",{"property":"og:url","content":"https://eathyn.github.io/blog/blog/front_end/typescript/book-learning_typescript/chapter_10.html"}],["meta",{"property":"og:title","content":"Generics"}],["meta",{"property":"og:description","content":"Generics The reason to use generics: a piece of code may be intended to work with various different types depending on how it’s called Generics may be declared using &lt; and &gt; brackets. Type parameters: T, U and UserInput in the demo below Type arguments: boolean, number and string in the demo below"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-12T13:42:19.000Z"}],["meta",{"property":"article:tag","content":"Book - Learning TypeScript"}],["meta",{"property":"article:tag","content":"chapter 10"}],["meta",{"property":"article:published_time","content":"2022-12-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-12T13:42:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Generics\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-12T13:42:19.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Generic Functions","slug":"generic-functions","link":"#generic-functions","children":[{"level":3,"title":"Explicit Generic Call Types","slug":"explicit-generic-call-types","link":"#explicit-generic-call-types","children":[]},{"level":3,"title":"Multiple Function Type Parameters","slug":"multiple-function-type-parameters","link":"#multiple-function-type-parameters","children":[]}]},{"level":2,"title":"Generic Interfaces","slug":"generic-interfaces","link":"#generic-interfaces","children":[{"level":3,"title":"Inferred Generic Interface Types","slug":"inferred-generic-interface-types","link":"#inferred-generic-interface-types","children":[]}]},{"level":2,"title":"Generic Classes","slug":"generic-classes","link":"#generic-classes","children":[{"level":3,"title":"Extending Generic Classes","slug":"extending-generic-classes","link":"#extending-generic-classes","children":[]},{"level":3,"title":"Implementing Generic Interfaces","slug":"implementing-generic-interfaces","link":"#implementing-generic-interfaces","children":[]},{"level":3,"title":"Method Generics","slug":"method-generics","link":"#method-generics","children":[]},{"level":3,"title":"Static Class Generics","slug":"static-class-generics","link":"#static-class-generics","children":[]}]},{"level":2,"title":"Generic Type Aliases","slug":"generic-type-aliases","link":"#generic-type-aliases","children":[{"level":3,"title":"Generic Discriminated Unions","slug":"generic-discriminated-unions","link":"#generic-discriminated-unions","children":[]}]},{"level":2,"title":"Generic Modifiers","slug":"generic-modifiers","link":"#generic-modifiers","children":[{"level":3,"title":"Generic Defaults","slug":"generic-defaults","link":"#generic-defaults","children":[]}]},{"level":2,"title":"Constrained Generic Types","slug":"constrained-generic-types","link":"#constrained-generic-types","children":[{"level":3,"title":"keyof and Constrained Type Parameters","slug":"keyof-and-constrained-type-parameters","link":"#keyof-and-constrained-type-parameters","children":[]}]},{"level":2,"title":"Promise","slug":"promise","link":"#promise","children":[{"level":3,"title":"Creating Promises","slug":"creating-promises","link":"#creating-promises","children":[]},{"level":3,"title":"Async Functions","slug":"async-functions","link":"#async-functions","children":[]}]},{"level":2,"title":"Using Generics Right","slug":"using-generics-right","link":"#using-generics-right","children":[{"level":3,"title":"The Golden Rule of Generics","slug":"the-golden-rule-of-generics","link":"#the-golden-rule-of-generics","children":[]},{"level":3,"title":"Generic Naming Conventions","slug":"generic-naming-conventions","link":"#generic-naming-conventions","children":[]}]}],"git":{"createdTime":1681306939000,"updatedTime":1681306939000,"contributors":[{"name":"Eathyn","email":"eathynzakas@gmail.com","commits":1}]},"readingTime":{"minutes":4.98,"words":1495},"filePathRelative":"front_end/typescript/book-learning_typescript/chapter_10.md","localizedDate":"2022年12月28日","excerpt":"<h1> Generics</h1>\\n<ul>\\n<li>The reason to use generics: a piece of code may be intended to work with various different types depending on how it’s called</li>\\n<li>Generics may be declared using <code>&lt;</code> and <code>&gt;</code> brackets.</li>\\n<li>Type parameters: <code>T</code>, <code>U</code> and <code>UserInput</code> in the demo below</li>\\n<li>Type arguments: <code>boolean</code>, <code>number</code> and <code>string</code> in the demo below</li>\\n</ul>","autoDesc":true}');export{e as data};
