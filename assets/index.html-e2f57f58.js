import{_ as t,W as o,X as p,$ as a,a0 as e,Y as n,C as l}from"./framework-c8ebc670.js";const c="/blog/assets/linear_tree-4aa74389.png",i={},u=e('<h1 id="binary-search-tree" tabindex="-1"><a class="header-anchor" href="#binary-search-tree" aria-hidden="true">#</a> Binary Search Tree</h1><h2 id="other-data-structure" tabindex="-1"><a class="header-anchor" href="#other-data-structure" aria-hidden="true">#</a> Other Data Structure</h2><ul><li>ordered array <ul><li>search: O(n) binary search</li><li>insertion: O(n) worst case</li><li>deletion: O(n) worst case</li></ul></li><li>hash table <ul><li>search: O(1)</li><li>insertion: O(1)</li><li>deletion: O(1)</li><li>but hash table is unordered</li></ul></li></ul><h2 id="concept" tabindex="-1"><a class="header-anchor" href="#concept" aria-hidden="true">#</a> Concept</h2><ul><li>平衡树（balanced tree）：所有子树的节点数都相同。如图所示：</li></ul>',5),r=n("ul",null,[n("li",null,"不平衡树（imbalanced tree）：有子树的节点数不相同。如图所示：")],-1),d=n("ul",null,[n("li",null,[n("p",null,"二叉树（binary tree）：每个节点只有 0 / 1 / 2 个子节点。")]),n("li",null,[n("p",null,"二叉搜索树（binary search tree）："),n("ul",null,[n("li",null,"每个节点最多只有 1 个左子节点和 1 个右子节点。"),n("li",null,"左子节点的值小于节点值，右子节点的值大于节点值。"),n("li",null,"节点值大于所有属于左子树的后代节点值，节点值小于所有属于右子树的后代节点值。")])])],-1),k=e('<h2 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h2><ul><li><p>当平衡树有 <code>N</code> 个节点时，它有 <code>logN</code> 层。因为二叉搜索树每次查找都向下移动一层，因此它的时间复杂度和层数一样，是 <code>O(logN)</code>。</p></li><li><p>在查找方面，二叉搜索树和有序数组的时间复杂度都是 <code>O(logN)</code>。</p></li></ul><h2 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h2><p>有序数组插入操作的时间复杂度：</p><ul><li>使用二分查找确定位置，时间复杂度为：O(logN)。</li><li>如果在数组的开头插入数据，那么后面的数据都需要向后移动一位，时间复杂度为：O(N)。</li><li>总和：O(logN) + O(N) = O(N)。</li></ul><p>二叉搜索树插入操作的时间复杂度：</p><ul><li>确定位置：时间复杂度为：O(logN)。</li><li>不需要移动其他节点的位置，因此总时间复杂度为 O(logN)。</li></ul><h2 id="线性结构的树" tabindex="-1"><a class="header-anchor" href="#线性结构的树" aria-hidden="true">#</a> 线性结构的树</h2><blockquote><p>Book: A Common-Sense Guide to DSA: p259 - p260</p></blockquote><p>线性结构的树指的是节点值从上到下是有序的。如图所示：</p><figure><img src="'+c+`" alt="线性树" tabindex="0" loading="lazy"><figcaption>线性树</figcaption></figure><p>线性结构的树在查找方面的时间复杂度是 <code>O(N)</code>。</p><h2 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h2><blockquote><p>A Common-Sense Guide to DSA: p260 - 271</p></blockquote><p>二叉查找树的删除操作的时间复杂度是 <code>O(logN)</code>。</p><h3 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h3><ul><li>如果待删除的节点没有子节点，则直接删除。</li><li>如果待删除的节点只有一个子节点，则该子节点替代待删除节点，然后删除待删除节点。</li><li>如果待删除的节点有两个子节点，就需要先寻找后续节点（successor node）：后续节点是待删除节点的右子树中的最小值。然后分两种情况处理： <ul><li>后续节点没有右子节点：后续节点替换待删除节点</li><li>后续节点有右子节点：后续节点替换待删除节点，并且后续节点的右子节点作为后续节点的原父节点的右子节点。</li></ul></li></ul><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// delete operation in binary search tree</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token parameter">valueToDelete<span class="token punctuation">,</span> node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valueToDelete <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>leftNode <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>valueToDelete<span class="token punctuation">,</span> node<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valueToDelete <span class="token operator">&gt;</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>valueToDelete<span class="token punctuation">,</span> node<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valueToDelete <span class="token operator">===</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理三种情况：</span>
    <span class="token comment">// 1. 当前节点没有左子节点</span>
    <span class="token comment">// 2. 当前节点没有右子节点</span>
    <span class="token comment">// 3. 当前节点没有子节点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> node<span class="token punctuation">.</span>rightNode
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>rightNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> node<span class="token punctuation">.</span>leftNode
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 处理当前节点有两个子节点的情况</span>
      node<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> <span class="token function">lift</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span> node<span class="token punctuation">)</span>
      <span class="token keyword">return</span> node
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">lift</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> nodeToDelete</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 寻找可以替换待删除节点的节点（即 successor node）：</span>
    <span class="token comment">// 1. 大于待删除节点的值</span>
    <span class="token comment">// 2. 步骤-1 中所有节点的最小值</span>
    node<span class="token punctuation">.</span>leftNode <span class="token operator">=</span> <span class="token function">lift</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span> nodeToDelete<span class="token punctuation">)</span>
    <span class="token keyword">return</span> node
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将 successor node 的右子节点当作 successor node 的原父节点的右子节点</span>
    nodeToDelete<span class="token punctuation">.</span>value <span class="token operator">=</span> node<span class="token punctuation">.</span>value
    <span class="token keyword">return</span> node<span class="token punctuation">.</span>rightNode
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h2><blockquote><p>Book: A Common-Sense Guide to DSA: p272 - p277</p></blockquote><p>树的遍历的时间复杂度是 <code>O(N)</code>。</p><h3 id="中序遍历-inorder-traverse" tabindex="-1"><a class="header-anchor" href="#中序遍历-inorder-traverse" aria-hidden="true">#</a> 中序遍历 inorder traverse</h3><p>根节点的遍历顺序位于中间：遍历左子树，然后根节点，最后右子树。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// inorder traverse in tree</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// base case</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="前序遍历-preorder-traverse" tabindex="-1"><a class="header-anchor" href="#前序遍历-preorder-traverse" aria-hidden="true">#</a> 前序遍历 preorder traverse</h3><p>根节点的遍历顺序位于最前：遍历根节点，然后左子树，最后右子树。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// preorder traverse in tree</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">preorderTraverse</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// base case</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token function">preorderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span>
  <span class="token function">preorderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="后序遍历-postorder-traverse" tabindex="-1"><a class="header-anchor" href="#后序遍历-postorder-traverse" aria-hidden="true">#</a> 后序遍历 postorder traverse</h3><p>根节点的遍历顺序位于最后：遍历左子树，然后右子树，最后根节点。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// postorder traverse in tree</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">postorderTraverse</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// base case</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token function">postorderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span>
  <span class="token function">postorderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,31);function v(m,h){const s=l("Mermaid");return o(),p("div",null,[u,a(s,{id:"mermaid-67",code:"eJzT1dXlKsksyUm1UkhKzEnMS05NUSgpSk3lAkmk5eSXJ2ckFpUohDhxKSg4Kujq2ikgWM5AlhOY5QJnuQJZzmCWG5zlzgUAX34XIA=="}),r,a(s,{id:"mermaid-75",code:"eJzT1dXlKsksyUm1UsjMTUrMScxLTk1RKClKTeUCSaXl5JcnZyQWlSiEOHEpKDgq6OraKSBYzkCWM5jlBme5cwEA830UpQ=="}),d,a(s,{id:"mermaid-105",code:"eJzT1dXlKsksyUm1UkjKzEssqlQoTk0sSs5QKClKTeUCyabl5JcnZyQWlSiEOHEpKBgaKOjq2imYIpiGILYpmGkMZ1mA5CFMQyME28iACwDHORmt"}),k])}const f=t(i,[["render",v],["__file","index.html.vue"]]);export{f as default};
