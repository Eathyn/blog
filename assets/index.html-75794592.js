import{_ as l,W as s,X as o,Y as e,Z as n,$ as a,a0 as t,C as d}from"./framework-0d71bc9d.js";const c={},r=e("h1",{id:"configuration",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#configuration","aria-hidden":"true"},"#"),n(" Configuration")],-1),u=e("h2",{id:"configuration-files",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#configuration-files","aria-hidden":"true"},"#"),n(" Configuration Files")],-1),h=e("p",null,"reference:",-1),g=e("li",null,"Pro Git: p20-p21",-1),f=e("li",null,"Pro Git: p336",-1),p={href:"https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-config",target:"_blank",rel:"noopener noreferrer"},b=t(`<p><code>git config --list --show-origin</code> 命令可以找到所有 Git 配置文件。</p><h3 id="system" tabindex="-1"><a class="header-anchor" href="#system" aria-hidden="true">#</a> System</h3><ul><li>定义：配置文件适用于本系统下的所有用户和仓库。</li><li>命令：<code>git config --system</code></li><li>配置文件的路径：<code>&lt;Git的安装目录&gt;/etc/gitconfig</code></li></ul><h3 id="global" tabindex="-1"><a class="header-anchor" href="#global" aria-hidden="true">#</a> Global</h3><ul><li>定义：配置文件适用于某个用户和他的所有仓库。</li><li>命令：<code>git config --global</code></li><li>配置文件的路径：<code>C:/User/&lt;username&gt;/.gitconfig</code></li></ul><h3 id="local" tabindex="-1"><a class="header-anchor" href="#local" aria-hidden="true">#</a> Local</h3><ul><li>定义：配置文件适用于某个仓库。</li><li>命令：<code>git config --local</code>（--local 是默认参数）</li><li>配置文件的路径：<code>&lt;仓库路径&gt;/.git/config</code></li></ul><h2 id="get-a-config" tabindex="-1"><a class="header-anchor" href="#get-a-config" aria-hidden="true">#</a> Get a Config</h2><p><code>git config --get &lt;name&gt;</code> 可以获取某一个配置。例如：</p><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>git config --get user.name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="set-a-config" tabindex="-1"><a class="header-anchor" href="#set-a-config" aria-hidden="true">#</a> Set a Config</h2><p><code>git config &lt;name&gt; &lt;value&gt;</code> 可以设置某一个配置。例如：</p><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>git config user.name Eaven
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="get-all-config" tabindex="-1"><a class="header-anchor" href="#get-all-config" aria-hidden="true">#</a> Get all Config</h2><p><code>git config --list</code> 可以获取所有配置。</p><h2 id="delete-a-config" tabindex="-1"><a class="header-anchor" href="#delete-a-config" aria-hidden="true">#</a> Delete a Config</h2><p><code>git config --unset &lt;name&gt;</code> 删除指定的配置。</p><h2 id="lf-and-crlf" tabindex="-1"><a class="header-anchor" href="#lf-and-crlf" aria-hidden="true">#</a> LF and CRLF</h2>`,18),m={href:"http://kuanghy.github.io/2017/03/19/git-lf-or-crlf",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><ul><li><p>Unix 和 Linux 的换行符是 <code>0x0A(LF)</code>，Windows 的换行符是 <code>0x0D0A(CRLF)</code>。</p></li><li><p>配置 Git 的 <code>core.autocrlf</code> 和 <code>core.safecrlf</code> 可以解决上述问题：</p></li></ul><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code><span class="token comment"># 统一为 LF</span>
git config --global core.autocrlf input
git config --global core.safecrlf false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>core.autocrlf</code> 有三个值： <ul><li>true: 提交时转换为 LF，检出时转换为 CRLF。</li><li>false: 提交和检出时均不转换。</li><li>input: 提交时转换为 LF，检出时不转换。</li></ul></li></ul><h3 id="转换" tabindex="-1"><a class="header-anchor" href="#转换" aria-hidden="true">#</a> 转换</h3><ul><li>在 Git Bash 中，使用 <code>dos2unix &lt;file-path&gt;</code> 可以将指定的文件的换行符全部转为 <code>LF</code>。</li><li>在 Git Bash 中，使用 <code>unix2dos &lt;file-path&gt;</code> 可以将指定的文件的换行符全部转为 <code>CRLF</code>。</li></ul><h2 id="safecrlf" tabindex="-1"><a class="header-anchor" href="#safecrlf" aria-hidden="true">#</a> SafeCRLF</h2>`,7),_={href:"http://kuanghy.github.io/2017/03/19/git-lf-or-crlf",target:"_blank",rel:"noopener noreferrer"},x=e("p",null,[e("code",null,"core.safecrlf"),n(" 有三个值：")],-1),y=e("ul",null,[e("li",null,"true: 不允许提交包含混合换行符的文件。"),e("li",null,"false: 允许提交包含混合换行符的文件"),e("li",null,"warn: 提交包含混合换行符的文件时给出警告。")],-1),k=e("h2",{id:"multiple-ssh-keys",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#multiple-ssh-keys","aria-hidden":"true"},"#"),n(" Multiple SSH Keys")],-1),S=e("p",null,"Reference:",-1),H={href:"https://gist.github.com/aprilmintacpineda/f101bf5fd34f1e6664497cf4b9b9345f",target:"_blank",rel:"noopener noreferrer"},w={href:"https://psychowhiz.medium.com/configuring-multiple-ssh-keys-for-git-on-the-same-device-41c29320e5fe",target:"_blank",rel:"noopener noreferrer"},C={href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key",target:"_blank",rel:"noopener noreferrer"},G={href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account",target:"_blank",rel:"noopener noreferrer"},L={href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent",target:"_blank",rel:"noopener noreferrer"},F={href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account",target:"_blank",rel:"noopener noreferrer"},R=e("li",null,[e("p",null,[n("配置 "),e("code",null,"~/.ssh/config"),n(" 文件：")])],-1),P=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Eathyn GitHub Account
Host eathyn
    HostName github.com
    # \`id_ed25519_eathyn\` 是文件 SSH key 的文件名
    IdentityFile ~/.ssh/id_ed25519_eathyn

# ZYB GitHub Account
Host zyb
    HostName github.com
    # \`id_ed25519_zyb\` 是文件 SSH key 的文件名
    IdentityFile ~/.ssh/id_ed25519_zyb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用命令测试是否可以使用，如果返回 <code>Hi xxx! You&#39;ve successfully authenticated</code>，则说明本地与源端连接成功：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Eathyn</span>
<span class="token function">ssh</span> <span class="token parameter variable">-vT</span> git@eathyn

<span class="token comment"># ZYB</span>
<span class="token function">ssh</span> <span class="token parameter variable">-vT</span> git@zyb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>进行 Git 操作时，要将 <code>github.com</code> 改为 <code>~/.ssh/config</code> 文件中配置的 Host 值：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># before</span>
<span class="token function">git</span> clone git@github.com:liruifengv/daily-poetry-image.git

<span class="token comment"># after</span>
<span class="token function">git</span> clone git@eathyn:liruifengv/daily-poetry-image.git

<span class="token comment"># after</span>
<span class="token function">git</span> clone git@zyb:liruifengv/daily-poetry-image.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="proxy" tabindex="-1"><a class="header-anchor" href="#proxy" aria-hidden="true">#</a> Proxy</h2><ul><li>配置代理后克隆仓库才能更快速。</li></ul><h3 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh" aria-hidden="true">#</a> SSH</h3>`,8),T=e("p",null,"Reference:",-1),z={href:"https://gist.github.com/ozbillwang/005bd1dfc597a2f3a00148834ad3e551",target:"_blank",rel:"noopener noreferrer"},B={href:"https://stackoverflow.com/a/6739420",target:"_blank",rel:"noopener noreferrer"},A=t(`<ul><li>在 <code>~/.ssh/config</code> 文件中添加 <code>ProxyCommand connect -H 127.0.0.1:10809 -a none %h %p</code> 命令。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Proxy
ProxyCommand connect -H 127.0.0.1:10809 -a none %h %p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="http-https" tabindex="-1"><a class="header-anchor" href="#http-https" aria-hidden="true">#</a> HTTP / HTTPS</h3><ul><li>在 <code>~/.gitconfig</code> 文件中的 <code>http</code> 和 <code>https</code> 模块添加 <code>proxy = 127.0.0.1:10809</code> 命令。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[http]
	proxy = 127.0.0.1:10809
[https]
    proxy = 127.0.0.1:10809
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function E(N,q){const i=d("ExternalLinkIcon");return s(),o("div",null,[r,u,e("blockquote",null,[h,e("ul",null,[g,f,e("li",null,[e("a",p,[n("git config"),a(i)])])])]),b,e("blockquote",null,[e("p",null,[n("Reference: "),e("a",m,[n("blog"),a(i)])])]),v,e("blockquote",null,[e("p",null,[n("Reference: "),e("a",_,[n("blog"),a(i)])])]),x,y,k,e("blockquote",null,[S,e("ul",null,[e("li",null,[e("a",H,[n("Using Multiple SSH Keys"),a(i)])]),e("li",null,[e("a",w,[n("Configure multiple SSH-keys for GIT on the same device"),a(i)])]),e("li",null,[e("a",C,[n("Generating a new SSH key and adding it to the ssh-agent"),a(i)])]),e("li",null,[e("a",G,[n("Adding a new SSH key to your GitHub account"),a(i)])])])]),e("ul",null,[e("li",null,[e("p",null,[n("根据"),e("a",L,[n("文档"),a(i)]),n("生成 SSH Key 文件并添加到 SSH Agent。")])]),e("li",null,[e("p",null,[n("根据"),e("a",F,[n("文档"),a(i)]),n("将公用的 SSH Key 保存到 GitHub。")])]),R]),P,e("blockquote",null,[T,e("ul",null,[e("li",null,[e("a",z,[n("config SSH proxy"),a(i)])]),e("li",null,[e("a",B,[n("config SSH proxy"),a(i)])])])]),A])}const K=l(c,[["render",E],["__file","index.html.vue"]]);export{K as default};
