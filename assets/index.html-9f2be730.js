import{_ as e,W as o,X as c,Y as n,Z as s,$ as t,a0 as p,C as i}from"./framework-c8ebc670.js";const l={},u=n("h1",{id:"文件上传",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#文件上传","aria-hidden":"true"},"#"),s(" 文件上传")],-1),r=n("h2",{id:"源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#源码","aria-hidden":"true"},"#"),s(" 源码")],-1),k={href:"https://github.com/Eathyn/file-upload-solution",target:"_blank",rel:"noopener noreferrer"},d=p(`<h2 id="检测文件类型" tabindex="-1"><a class="header-anchor" href="#检测文件类型" aria-hidden="true">#</a> 检测文件类型</h2><p>input 元素的 accept 属性可以限制用户上传文件的类型。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image/*, video/*<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开发者可能会通过文件后缀或者 <code>File</code> 对象来获取文件类型，但是这种检测方式并不可靠，因为用户可以通过修改文件后缀改变文件的类型。很多文件的类型是由起始的几个字节确定的，这些字节称为魔数（magic number）。例如：<code>JPEG</code> 的魔数为 <code>0xFF D8 FF</code>，PNG 的魔数为 <code>0x89 50 4E 47 0D 0A 1A 0A</code>。</p>`,4),v={href:"https://github.com/sindresorhus/file-type",target:"_blank",rel:"noopener noreferrer"},m=p(`<h2 id="文件切片" tabindex="-1"><a class="header-anchor" href="#文件切片" aria-hidden="true">#</a> 文件切片</h2><p>使用 <code>Blob.prototype.slice</code> 将文件切片。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createFileChunk</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token constant">SIZE</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fileChunkList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// cur: 开始字节    cur + size: 结束字节</span>
    fileChunkList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">file</span><span class="token operator">:</span> file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> cur <span class="token operator">+</span> size<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    cur <span class="token operator">+=</span> size
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> fileChunkList
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据文件生成哈希值。因为生成哈希值的计算过程比较耗时，并且 JS 是单线程，所以需要使用 <code>Web Workers</code> 开启另一个线程计算哈希值，避免阻塞到主线程导致页面卡顿甚至白屏。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">calculateHash</span><span class="token punctuation">(</span><span class="token parameter">fileChunkList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 开启子线程</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;/hash.js&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> fileChunkList <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> percentage<span class="token punctuation">,</span> hash <span class="token punctuation">}</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>data
      <span class="token keyword">this</span><span class="token punctuation">.</span>hashPercentage <span class="token operator">=</span> percentage
      <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>MD5</code> 算法根据文件生成哈希值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入脚本</span>
self<span class="token punctuation">.</span><span class="token function">importScripts</span><span class="token punctuation">(</span><span class="token string">&#39;/spark-md5.min.js&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 生成文件 hash</span>
self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> fileChunkList <span class="token punctuation">}</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>data
  <span class="token function">generateHashValue</span><span class="token punctuation">(</span>fileChunkList<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">generateHashValue</span><span class="token punctuation">(</span><span class="token parameter">fileChunkList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// SparkMD5 is a fast md5 implementation of the MD5 algorithm.</span>
  <span class="token comment">// 使用 MD5 算法根据文件生成哈希值</span>
  <span class="token keyword">const</span> spark <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">self<span class="token punctuation">.</span>SparkMD5<span class="token punctuation">.</span>ArrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> percentage <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">const</span> <span class="token function-variable function">loadNext</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    reader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span>fileChunkList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>file<span class="token punctuation">)</span>
    reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      count<span class="token operator">++</span>
      <span class="token comment">// 每个切片都调用 \`append\` 可以使占用内存空间更小：</span>
      <span class="token comment">// Incremental md5 performs a lot better for hashing large amounts of data, such as files.</span>
      <span class="token comment">// Append each chunk for md5 hashing while keeping memory usage low.</span>
      spark<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> fileChunkList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">percentage</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
          <span class="token comment">// Finishes the computation of the md5, returning the hex result.</span>
          <span class="token literal-property property">hash</span><span class="token operator">:</span> spark<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        percentage <span class="token operator">+=</span> <span class="token number">100</span> <span class="token operator">/</span> fileChunkList<span class="token punctuation">.</span>length
        self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          percentage<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token function">loadNext</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">loadNext</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个切片的名称设置为文件的 <code>哈希值-切片索引</code>，断点续传时才可以知道哪些切片之前已经上传过。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fileChunkList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> file <span class="token punctuation">}</span><span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">fileHash</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>hash<span class="token punctuation">,</span>
  index<span class="token punctuation">,</span>
  <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>hash <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> index<span class="token punctuation">,</span>
  <span class="token literal-property property">chunk</span><span class="token operator">:</span> file<span class="token punctuation">,</span>
  <span class="token literal-property property">size</span><span class="token operator">:</span> file<span class="token punctuation">.</span>size<span class="token punctuation">,</span>
  <span class="token literal-property property">percentage</span><span class="token operator">:</span> uploadedList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>hash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token operator">?</span> <span class="token number">100</span>
    <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文件上传-1" tabindex="-1"><a class="header-anchor" href="#文件上传-1" aria-hidden="true">#</a> 文件上传</h2><h3 id="并发控制" tabindex="-1"><a class="header-anchor" href="#并发控制" aria-hidden="true">#</a> 并发控制</h3><p>并发上传文件切片时，需要控制并发量，避免一次性上传过多切片，导致服务端压力过大。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> requestList <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> dataList<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> formData<span class="token punctuation">,</span> index <span class="token punctuation">}</span> <span class="token operator">=</span> item
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> formData<span class="token punctuation">,</span>
    <span class="token literal-property property">onProgress</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createProgressHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">requestList</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestList<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 封装并发控制函数: asyncPool</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token parameter">poolLimit<span class="token punctuation">,</span> iterable<span class="token punctuation">,</span> iteratorFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> executing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">iteratorFn</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>
    ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    executing<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">clean</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> executing<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>clean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>clean<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>executing<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> poolLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>executing<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="断点续传" tabindex="-1"><a class="header-anchor" href="#断点续传" aria-hidden="true">#</a> 断点续传</h3><p>断点续传指的是上传过程中暂停上传，只上传了一部分文件切片，下一次上传同个文件时不需要上传之前已经上传过的文件切片，只需要上传未上传的文件切片。</p><p>断点续传的实现方式是，上传文件切片之前发送一个请求，从后端获取已上传的文件切片的名称列表，前端把已上传的文件切片过滤掉，只上传未上传的文件切片。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// uploadedList: 一个包含已上传的切片的索引，格式为 \`文件哈希-切片索引\`</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> shouldUpload<span class="token punctuation">,</span> uploadedList <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">verifyUpload</span><span class="token punctuation">(</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>file<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>hash<span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment">// 过滤</span>
<span class="token keyword">const</span> dataList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> hash <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>uploadedList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端把所有文件切片上传之后，发送一个合并切片的请求，通知后端合并切片。</p><h3 id="上传进度" tabindex="-1"><a class="header-anchor" href="#上传进度" aria-hidden="true">#</a> 上传进度</h3><p>利用 <code>XMLHttpRequest</code> 实例 <code>xhr.upload.onprogress</code> 监听每一个文件切片的上传进度。通过事件中的 <code>loaded</code> 和 <code>total</code> 就可以知道计算出上传进度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span> url<span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token function-variable function">onProgress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> e <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolv</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 监听每一个文件切片的上传进度</span>
    xhr<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>onprogress <span class="token operator">=</span> onProgress
    <span class="token comment">// 省略无关代码...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 并发控制，每个文件切片会创建一次 HTTP 请求</span>
<span class="token keyword">const</span> requestList <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> dataList<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> formData<span class="token punctuation">,</span> index <span class="token punctuation">}</span> <span class="token operator">=</span> item
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> formData<span class="token punctuation">,</span>
    <span class="token comment">// 创建监听每一个文件切片的上传进度的函数</span>
    <span class="token literal-property property">onProgress</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createProgressHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">requestList</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestList<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">createProgressHandler</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    item<span class="token punctuation">.</span>percentage <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>loaded <span class="token operator">/</span> e<span class="token punctuation">.</span>total<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>累加每个文件切片的上传进度就可以得到整个文件的上传进度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">uploadPercentage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>file <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
  <span class="token keyword">const</span> loaded <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>size <span class="token operator">*</span> item<span class="token punctuation">.</span>percentage<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> cur<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>loaded <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>file<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展-其他文件上传的方式" tabindex="-1"><a class="header-anchor" href="#扩展-其他文件上传的方式" aria-hidden="true">#</a> 扩展：其他文件上传的方式</h2><p>To be continued...</p>`,25),b={href:"https://juejin.cn/post/6980142557066067982",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"refs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#refs","aria-hidden":"true"},"#"),s(" Refs")],-1),f={href:"https://juejin.cn/post/6971935704938971173",target:"_blank",rel:"noopener noreferrer"},g={href:"https://juejin.cn/post/6844904046436843527",target:"_blank",rel:"noopener noreferrer"},y={href:"https://en.wikipedia.org/wiki/MD5",target:"_blank",rel:"noopener noreferrer"},w={href:"https://computersciencewiki.org/index.php/Hashing",target:"_blank",rel:"noopener noreferrer"},x={href:"https://javascript.info/formdata",target:"_blank",rel:"noopener noreferrer"};function _(j,L){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[n("a",k,[s("文件上传"),t(a)])]),d,n("p",null,[s("可以使用 "),n("a",v,[s("file type"),t(a)]),s(" 通过魔数识别文件类型。")]),m,n("blockquote",null,[n("p",null,[s("参考: "),n("a",b,[s("其他文件上传的方式"),t(a)])])]),h,n("ul",null,[n("li",null,[n("a",f,[s("检测文件类型"),t(a)])]),n("li",null,[n("a",g,[s("文件上传解决方案"),t(a)])]),n("li",null,[n("a",y,[s("What is MD5"),t(a)])]),n("li",null,[n("a",w,[s("What is hashing and hash value"),t(a)])]),n("li",null,[n("a",x,[s("FormData"),t(a)])])])])}const q=e(l,[["render",_],["__file","index.html.vue"]]);export{q as default};
