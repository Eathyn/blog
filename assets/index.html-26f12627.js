import{_ as a,W as e,X as t,Y as n,Z as o,$ as c,a0 as p,C as i}from"./framework-0d71bc9d.js";const l={},u=p(`<h1 id="concurrency-control" tabindex="-1"><a class="header-anchor" href="#concurrency-control" aria-hidden="true">#</a> Concurrency Control</h1><h2 id="代码解析" tabindex="-1"><a class="header-anchor" href="#代码解析" aria-hidden="true">#</a> 代码解析</h2><h3 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h3><ul><li><code>poolLimit</code>：最大并发值</li><li><code>iterable</code>：数据集</li><li><code>iteratorFn</code>：数据处理函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token parameter">poolLimit<span class="token punctuation">,</span> iterable<span class="token punctuation">,</span> iteratorFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数值存储" tabindex="-1"><a class="header-anchor" href="#数值存储" aria-hidden="true">#</a> 数值存储</h3><p><code>ret</code> 变量作为返回值，方便调用 <code>asyncPool</code> 之后通过 <code>then</code> 获取所有数据。<code>executing</code> 变量表示正在执行的 <code>Promise</code>。代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token parameter">poolLimit<span class="token punctuation">,</span> iterable<span class="token punctuation">,</span> iteratorFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> executing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> ret
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心代码" tabindex="-1"><a class="header-anchor" href="#核心代码" aria-hidden="true">#</a> 核心代码</h3><ul><li><p>[1] 使用 <code>for...of</code> 遍历数据集。</p></li><li><p>[2] 定义一个 <code>promise</code>，在 <code>then</code> 中执行 <code>iteratorFn</code>，参数是 <code>item</code> 和 <code>iterable</code>。</p></li><li><p>[3] <code>ret</code> 和 <code>executing</code> 把刚才定义的 <code>promise</code> 保存起来。</p></li><li><p>[4] 定义 <code>clean</code> 函数，无论 <code>promise</code> 成功或失败都调用 <code>clean</code> 函数将 <code>executing</code> 中的这个 <code>promise</code> 删除。</p></li><li><p>[5] 当正在执行的 <code>promise</code> 的数量（<code>executing.size</code>）大于最大并发值（<code>poolLimit</code>）时，使用 <code>await Promise.race(executing)</code> 确保 <code>executing</code> 中有一个 <code>promise</code> 的状态不是 <code>pending</code> 后才继续下一次 <code>for...of</code> 遍历，这是并发控制的核心语句。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPool</span><span class="token punctuation">(</span><span class="token parameter">poolLimit<span class="token punctuation">,</span> iterable<span class="token punctuation">,</span> iteratorFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> executing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// [1]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// [2]</span>
    <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">iteratorFn</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token comment">// [3]</span>
    ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    executing<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    
    <span class="token comment">// [4]</span>
    <span class="token keyword">const</span> <span class="token function-variable function">clean</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> executing<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>clean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>clean<span class="token punctuation">)</span>
    
    <span class="token comment">// [5]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>executing<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> poolLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>executing<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> Refs</h2>`,12),r={href:"https://github.com/rxaviers/async-pool/tree/1.x",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const s=i("ExternalLinkIcon");return e(),t("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[o("async-pool library"),c(s)])])])])}const b=a(l,[["render",d],["__file","index.html.vue"]]);export{b as default};
