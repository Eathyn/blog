import{_ as n,W as a,X as s,a0 as e}from"./framework-c8ebc670.js";const t="/blog/assets/tire-node-ds-848a072e.png",o="/blog/assets/store-1-f60f7b78.png",p="/blog/assets/store-2-7df63827.png",i={},c=e('<h1 id="tire" tabindex="-1"><a class="header-anchor" href="#tire" aria-hidden="true">#</a> Tire</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><ul><li>tire 可用于文本的自动完成和自动修正。</li><li>tire 属于树的一种。</li><li>tire 来源于单词 retrieval。</li><li>tire 的发音理论上是 tree，但这与 tree 混淆了，所以很多人把 tire 发音为 try。</li><li>tire 的其他名字为 prefix tree（前缀树）或 digital tree（字典树）。</li></ul><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h2><ul><li>字典树节点可以拥有多个子节点。</li><li>字典树节点是一个哈希表，键是字母，值是另一个字典树节点。</li></ul><figure><img src="'+t+'" alt="字典树节点的数据结构" tabindex="0" loading="lazy"><figcaption>字典树节点的数据结构</figcaption></figure><h2 id="存储方式" tabindex="-1"><a class="header-anchor" href="#存储方式" aria-hidden="true">#</a> 存储方式</h2><p>单词的最后一个字母的值是一个哈希表，这个哈希表的键是星号（*），值是空值（null）。</p><figure><img src="'+o+'" alt="单词结尾的存储方式" tabindex="0" loading="lazy"><figcaption>单词结尾的存储方式</figcaption></figure><p>单词可能是另一个单词的一部分。</p><figure><img src="'+p+`" alt="单词衍生" tabindex="0" loading="lazy"><figcaption>单词衍生</figcaption></figure><h2 id="搜索" tabindex="-1"><a class="header-anchor" href="#搜索" aria-hidden="true">#</a> 搜索</h2><h3 id="方式" tabindex="-1"><a class="header-anchor" href="#方式" aria-hidden="true">#</a> 方式</h3><blockquote><p>Book: A Common-Sense Guide to DSA: p311</p></blockquote><ul><li>搜索单词是否在字典树中</li><li>搜索单词是否为某个单词的前缀（以下算法和代码根据这种搜索）</li></ul><h3 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h3><blockquote><p>Book: A Common-Sense Guide to DSA: p311</p></blockquote><ol><li>声明 currentNode 变量，该变量指向字典树的根节点。</li><li>遍历单词的字母 <ul><li>如果当前节点的哈希表中无法找到该字母，则说明单词不在字典树中。</li><li>如果找到该字母，则 currentNode 向下移动一位，开始遍历单词的下一个字母。</li></ul></li></ol><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">let</span> currentNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> char <span class="token keyword">in</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token comment">// 返回 currentNode 用于实现自动完成功能</span>
 <span class="token keyword">return</span> currentNode
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h3><blockquote><p>Book: A Common-Sense Guide to DSA: p315 - p316</p></blockquote><ul><li>不是 O(1)：这个算法的时间复杂度不是 O(1)，因为算法的执行次数不是固定的，而是取决于单词的字母个数。</li><li>不是 O(N)：O(N) 的含义是算法的执行次数随着单词数量的增加而增加。</li><li>O(K)：O(K) 的含义是算法的执行次数随着要查找单词的字母数量的增加而增加。</li><li>如果使用数组有序地保存所有单词，那么查找操作的时间复杂度是 O(logN)，相比于 O(K) 较慢。</li></ul><h2 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h2><h3 id="算法-1" tabindex="-1"><a class="header-anchor" href="#算法-1" aria-hidden="true">#</a> 算法</h3><blockquote><p>Book: A Common-Sense Guide to DSA: p316 - p319</p></blockquote><ol><li>创建 currentNode 变量指向字典树的根节点。</li><li>从要查找单词的第一个字母开始遍历，如果 currentNode 指向的哈希表有这个字母，则 currentNode 向下移动一位。否则在当前哈希表中添加键值对，键是找不到的字母，值是新的哈希表。</li><li>重复步骤二直到结束遍历。</li><li>结束后添加键值对，键是 *，值是 null。</li></ol><h3 id="实现-1" tabindex="-1"><a class="header-anchor" href="#实现-1" aria-hidden="true">#</a> 实现</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> currentNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> char <span class="token keyword">of</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TireNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 代码优化</span>
      <span class="token comment">// if (!currentNode.children.hasOwnProperty(char)) {</span>
      <span class="token comment">//    currentNode.children[char] = new TireNode()</span>
      <span class="token comment">// }</span>
      <span class="token comment">// currentNode = currentNode.children[char]</span>
   <span class="token punctuation">}</span>
   currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间复杂度-1" tabindex="-1"><a class="header-anchor" href="#时间复杂度-1" aria-hidden="true">#</a> 时间复杂度</h3><p>和搜索算法的时间复杂度一样</p><h2 id="自动完成算法" tabindex="-1"><a class="header-anchor" href="#自动完成算法" aria-hidden="true">#</a> 自动完成算法</h2><h3 id="初级算法" tabindex="-1"><a class="header-anchor" href="#初级算法" aria-hidden="true">#</a> 初级算法</h3><p>遍历字典树，把所有单词保存到数组中，返回这个数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">collectAllWords</span><span class="token punctuation">(</span>node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> word <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> currentNode <span class="token operator">=</span> node <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> char <span class="token keyword">in</span> currentNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">===</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      words<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">collectAllWords</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>word<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> words<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> words
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),l=[c];function r(u,d){return a(),s("div",null,l)}const h=n(i,[["render",r],["__file","index.html.vue"]]);export{h as default};
