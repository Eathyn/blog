import{_ as e,W as o,X as p,Y as n,Z as s,$ as t,a0 as c,C as l}from"./framework-0d71bc9d.js";const i={},u=n("h1",{id:"counting-sort",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#counting-sort","aria-hidden":"true"},"#"),s(" Counting Sort")],-1),r=n("h2",{id:"原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原理","aria-hidden":"true"},"#"),s(" 原理")],-1),d=n("p",null,"Reference:",-1),k={href:"https://www.programiz.com/dsa/counting-sort",target:"_blank",rel:"noopener noreferrer"},v={href:"https://youtu.be/7zuGmKfUt7s",target:"_blank",rel:"noopener noreferrer"},m={href:"https://en.wikipedia.org/wiki/Counting_sort#Complexity_analysis",target:"_blank",rel:"noopener noreferrer"},h=c(`<h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">countingSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 找到数组中的最大值</span>
  <span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>

  <span class="token comment">// 创建长度为 \`max+1\` 的新数组，初始值为 0</span>
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

  <span class="token comment">// 记录 \`arr\` 中各项出现的次数</span>
  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">)</span>

  <span class="token comment">// 每一项的值修改为当前值加前一项的值</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将 \`arr\` 各项的值作为 \`count\` 的索引，获取 \`count\` 对应的值。</span>
    <span class="token comment">// \`count 对应的值 - 1\` 作为 output 的索引，把 arr 的项作为这个索引的值。</span>
    <span class="token keyword">const</span> index <span class="token operator">=</span> count<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span>
    output<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value
    <span class="token comment">// 设置完 output 的值后，对应的 count 值减一。</span>
    count<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">--</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  output<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h2><ul><li>O(n + k) <ul><li>O(n): 找到 <code>arr</code> 数组中的最大值</li><li>O(k): 将 <code>count</code> 数组每一项都设置为 0</li><li>O(n): 记录 <code>arr</code> 中各项出现的次数</li><li>O(k-1): 每一项的值修改为当前值加前一项的值</li><li>O(n): 计算 <code>output</code> 数组各项的值</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>n : <code>arr</code> 的长度</li><li>k : <code>count</code> 的长度</li><li>最好、最坏和平均的时间复杂度都一样</li></ul></div><h2 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度" aria-hidden="true">#</a> 空间复杂度</h2><ul><li>O(k + n) <ul><li>O(k + 1): <code>count</code> 数组所占的空间</li><li>O(n): <code>output</code> 数组所占的空间</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>n : <code>arr</code> 的长度</li><li>k : <code>count</code> 的长度</li></ul></div>`,8);function b(f,_){const a=l("ExternalLinkIcon");return o(),p("div",null,[u,r,n("blockquote",null,[d,n("ul",null,[n("li",null,[n("a",k,[s("Counting Sort Algorithm"),t(a)])]),n("li",null,[n("a",v,[s("Counting Sort | GeeksforGeeks"),t(a)])]),n("li",null,[n("a",m,[s("Counting Sort Complexity Analysis"),t(a)])])])]),h])}const g=e(i,[["render",b],["__file","index.html.vue"]]);export{g as default};
