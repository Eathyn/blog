import{_ as p,W as e,X as o,Y as n,Z as s,$ as t,a0 as c,C as i}from"./framework-c8ebc670.js";const l="/blog/assets/cases-1c03bb80.png",u={},r=c(`<h1 id="虚拟滚动" tabindex="-1"><a class="header-anchor" href="#虚拟滚动" aria-hidden="true">#</a> 虚拟滚动</h1><h2 id="原因" tabindex="-1"><a class="header-anchor" href="#原因" aria-hidden="true">#</a> 原因</h2><p>一次性渲染大量 DOM 操作时，浏览器花费太多时间渲染 DOM，导致白屏甚至无响应。</p><h2 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h2><p>不要一次性渲染所有 DOM，只渲染当前屏幕里显示的元素的 DOM。那么关键就是确定要显示的元素的开始索引和结束索引。</p><p>通过 <code>scroll</code> 事件获取 <code>scrollTop</code>。通过 <code>scrollTop</code> 计算可视区的开始索引（<code>start</code>）和结束索引（<code>end</code>）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 滚动事件处理函数</span>
<span class="token keyword">function</span> <span class="token function">scrollEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 当前滚动位置</span>
  <span class="token keyword">let</span> scrollTop <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>list<span class="token punctuation">.</span>scrollTop
  <span class="token comment">// 此时的开始索引</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStartIndex</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">)</span>
  <span class="token comment">// 此时的结束索引</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>visibleCount
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>计算获取开始索引：通过 <code>getStartIndex</code> 获取开始索引。<code>getStartIndex</code> 的实现可以是将 <code>scrollTop</code> 和每一个列表项进行对比，那么时间复杂度是 <code>O(n)</code>。因为列表项的 <code>bottom</code> 是从上到下是升序的，所以采用二分查找可以将时间复杂度降低为 <code>O(logN)</code>。一共有五种情况，代码和图示如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取列表起始索引</span>
<span class="token keyword">function</span> <span class="token function">getStartIndex</span><span class="token punctuation">(</span><span class="token parameter">scrollTop <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> startIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">,</span> scrollTop<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> startIndex
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;binary search has some errors&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用二分查找将时间复杂度降低为 O(logN)</span>
<span class="token keyword">function</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token parameter">positions<span class="token punctuation">,</span> scrollTop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">let</span> end <span class="token operator">=</span> positions<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>positions<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">===</span> scrollTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// case-1：scrollTop 等于某一列表项的 bottom，说明可视区的第一项是该列表项的下一项</span>
      <span class="token keyword">return</span> middle <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>positions<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">&lt;</span> scrollTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// case-2：缩小范围，继续计算</span>
      start <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>positions<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">&gt;</span> scrollTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// case-3：开始索引是第一项</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>middle <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> middle
      <span class="token punctuation">}</span>
      <span class="token comment">// case-4：屏幕中的第一项只显示一部分，另一部分在 scrollTop 中</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>positions<span class="token punctuation">[</span>middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">&lt;</span> scrollTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> middle
      <span class="token punctuation">}</span>
      <span class="token comment">// case-5：缩小范围，继续计算</span>
      end <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="cases" tabindex="0" loading="lazy"><figcaption>cases</figcaption></figure><p>动态高度处理方式：</p><ul><li>滚动鼠标滚轮时会触发 <code>scroll</code> 事件处理函数，在 <code>scroll</code> 事件处理函数中会改变开始索引 <code>start</code>。因为 <code>visibleData</code> 是居于 <code>start</code> 的 <code>computed</code> 属性，且 <code>visibleData</code> 绑定到 <code>template</code> 中，所以 <code>visibleData</code> 改变后会触发 <code>updated</code> 钩子函数。</li><li>因为想要获取到渲染后的列表项的实际高度，所以需要在 <code>updated</code> 钩子函数中处理动态高度问题，并使用 <code>nextTick</code>。</li><li>在 <code>updated</code> 钩子函数中调用 <code>updateItemSize</code> 函数，该函数使用 <code>getBoundingClientRect</code> 获取每个列表项的当前高度等位置信息，然后计算出当前高度与预估高度之间的差值，最后更新列表项和该列表项下所有列表的位置信息，最后更新列表总高度。代码如下：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>items <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateItemsSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 更新列表总高度</span>
    <span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bottom
    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>phantom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> height <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取真实元素大小，更新列表项的高度等各项信息</span>
<span class="token keyword">function</span> <span class="token function">updateItemsSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>items
  nodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> rect <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> height <span class="token operator">=</span> rect<span class="token punctuation">.</span>height
    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> oldHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>height
    <span class="token keyword">const</span> dValue <span class="token operator">=</span> oldHeight <span class="token operator">-</span> height
    <span class="token comment">// 如果存在差值，则更新列表项的高度等各项信息</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 更新列表项的 bottom 和 height，top 不变</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">-</span> dValue
      <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height
      <span class="token comment">// 更新该列表项下面所有列表项的 top 和 bottom，height 不变</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bottom
        <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">-</span> dValue
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>移动列表项父元素的位置：因为鼠标滚轮向下滚动时，包含列表项的父元素也会向上移动，所以需要使用 <code>transform: translate3d</code> 向下移动该元素的位置。代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">setStartOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> startOffset
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>start<span class="token punctuation">]</span><span class="token punctuation">.</span>top <span class="token operator">-</span>
      <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aboveCount<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aboveCount<span class="token punctuation">]</span><span class="token punctuation">.</span>top <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
    startOffset <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>bottom <span class="token operator">-</span> size
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    startOffset <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 鼠标滚轮向下滚动时，包含列表项的父元素也会向上移动，因此需要使用 \`transform: translate3d\` 向下移动该元素的位置</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>content<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">translate3d(0, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> startOffset <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, 0)</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化-1" tabindex="-1"><a class="header-anchor" href="#优化-1" aria-hidden="true">#</a> 优化-1</h2><p>使用节流限制 <code>scroll</code> 事件的执行频率，或者使用 <code>IntersectionObserver</code> API。</p><h2 id="优化-2" tabindex="-1"><a class="header-anchor" href="#优化-2" aria-hidden="true">#</a> 优化-2</h2><p>如果列表项中存在图片，且图片的高度决定了列表项的高度。可以使用 <code>ResizeObserver</code> API 进行监听。</p><h2 id="完整代码地址" tabindex="-1"><a class="header-anchor" href="#完整代码地址" aria-hidden="true">#</a> 完整代码地址</h2>`,20),k={href:"https://github.com/Eathyn/virtual-scrolling",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"refs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#refs","aria-hidden":"true"},"#"),s(" Refs")],-1),v={href:"https://juejin.cn/post/6844903982742110216",target:"_blank",rel:"noopener noreferrer"};function m(b,h){const a=i("ExternalLinkIcon");return e(),o("div",null,[r,n("p",null,[n("a",k,[s("Virtual Scrolling in GitHub"),t(a)])]),d,n("p",null,[n("a",v,[s("Virtual Scrolling"),t(a)])])])}const w=p(u,[["render",m],["__file","index.html.vue"]]);export{w as default};
