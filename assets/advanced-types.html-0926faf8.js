const e=JSON.parse(`{"key":"v-24a8b946","path":"/front_end/typescript/syntax/advanced-types.html","title":"Advanced Types","lang":"zh-CN","frontmatter":{"date":"2023-06-15T00:00:00.000Z","category":"TypeScript","description":"Advanced Types Mapped Type Reference: Learning TypeScript: p253-254 Definition 映射类型（mapped type）指的是对某个类型的所有属性进行操作后形成的新类型。 type Animal = 'panda' | 'monkey' | 'elephant' type AnimalCount = { [k in Animal]: number } // {panda: number, monkey: number, elephant: number}","head":[["meta",{"property":"og:url","content":"https://eathyn.github.io/blog/blog/front_end/typescript/syntax/advanced-types.html"}],["meta",{"property":"og:title","content":"Advanced Types"}],["meta",{"property":"og:description","content":"Advanced Types Mapped Type Reference: Learning TypeScript: p253-254 Definition 映射类型（mapped type）指的是对某个类型的所有属性进行操作后形成的新类型。 type Animal = 'panda' | 'monkey' | 'elephant' type AnimalCount = { [k in Animal]: number } // {panda: number, monkey: number, elephant: number}"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2023-06-15T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Advanced Types\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-15T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Mapped Type","slug":"mapped-type","link":"#mapped-type","children":[{"level":3,"title":"Definition","slug":"definition","link":"#definition","children":[]},{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]}]},{"level":2,"title":"Conditional Type","slug":"conditional-type","link":"#conditional-type","children":[{"level":3,"title":"Definition","slug":"definition-1","link":"#definition-1","children":[]},{"level":3,"title":"Usage","slug":"usage-1","link":"#usage-1","children":[]}]},{"level":2,"title":"Literal Type","slug":"literal-type","link":"#literal-type","children":[]},{"level":2,"title":"Template Literal Type","slug":"template-literal-type","link":"#template-literal-type","children":[]},{"level":2,"title":"Recursive Type","slug":"recursive-type","link":"#recursive-type","children":[]}],"git":{},"readingTime":{"minutes":1.2,"words":359},"filePathRelative":"front_end/typescript/syntax/advanced-types.md","localizedDate":"2023年6月15日","excerpt":"<h1> Advanced Types</h1>\\n<h2> Mapped Type</h2>\\n<blockquote>\\n<p>Reference: <em>Learning TypeScript</em>: p253-254</p>\\n</blockquote>\\n<h3> Definition</h3>\\n<ul>\\n<li>映射类型（mapped type）指的是对某个类型的所有属性进行操作后形成的新类型。</li>\\n</ul>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">Animal</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'panda'</span> <span class=\\"token operator\\">|</span> <span class=\\"token string\\">'monkey'</span> <span class=\\"token operator\\">|</span> <span class=\\"token string\\">'elephant'</span>\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">AnimalCount</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token punctuation\\">[</span>k <span class=\\"token keyword\\">in</span> Animal<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token comment\\">// {panda: number, monkey: number, elephant: number}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
