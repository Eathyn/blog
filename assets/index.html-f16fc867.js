import{_ as t,W as o,X as c,Y as e,Z as a,$ as n,a0 as l,C as d}from"./framework-c8ebc670.js";const r={},s=l(`<h1 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h1><h2 id="get-a-config" tabindex="-1"><a class="header-anchor" href="#get-a-config" aria-hidden="true">#</a> Get a Config</h2><p><code>git config --get &lt;name&gt;</code> 可以获取某一个配置。例如：</p><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>git config --get user.name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="set-a-config" tabindex="-1"><a class="header-anchor" href="#set-a-config" aria-hidden="true">#</a> Set a Config</h2><p><code>git config &lt;name&gt; &lt;value&gt;</code> 可以设置某一个配置。例如：</p><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code>git config user.name Eaven
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="get-all-config" tabindex="-1"><a class="header-anchor" href="#get-all-config" aria-hidden="true">#</a> Get all Config</h2><p><code>git config --list</code> 可以获取所有配置。</p><h2 id="lf-and-crlf" tabindex="-1"><a class="header-anchor" href="#lf-and-crlf" aria-hidden="true">#</a> LF and CRLF</h2>`,10),u={href:"http://kuanghy.github.io/2017/03/19/git-lf-or-crlf",target:"_blank",rel:"noopener noreferrer"},h=l(`<h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><ul><li><p>Unix 和 Linux 的换行符是 <code>0x0A(LF)</code>，Windows 的换行符是 <code>0x0D0A(CRLF)</code>。</p></li><li><p>配置 Git 的 <code>core.autocrlf</code> 和 <code>core.safecrlf</code> 可以解决上述问题：</p></li></ul><div class="language-git line-numbers-mode" data-ext="git"><pre class="language-git"><code><span class="token comment"># 统一为 LF</span>
git config --global core.autocrlf input
git config --global core.safecrlf false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>core.autocrlf</code> 有三个值： <ul><li>true: 提交时转换为 LF，检出时转换为 CRLF。</li><li>false: 提交和检出时均不转换。</li><li>input: 提交时转换为 LF，检出时不转换。</li></ul></li></ul><h3 id="转换" tabindex="-1"><a class="header-anchor" href="#转换" aria-hidden="true">#</a> 转换</h3><ul><li>在 Git Bash 中，使用 <code>dos2unix &lt;file-path&gt;</code> 可以将指定的文件的换行符全部转为 <code>LF</code>。</li><li>在 Git Bash 中，使用 <code>unix2dos &lt;file-path&gt;</code> 可以将指定的文件的换行符全部转为 <code>CRLF</code>。</li></ul><h2 id="safecrlf" tabindex="-1"><a class="header-anchor" href="#safecrlf" aria-hidden="true">#</a> SafeCRLF</h2>`,7),g={href:"http://kuanghy.github.io/2017/03/19/git-lf-or-crlf",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,[e("code",null,"core.safecrlf"),a(" 有三个值：")],-1),p=e("ul",null,[e("li",null,"true: 不允许提交包含混合换行符的文件。"),e("li",null,"false: 允许提交包含混合换行符的文件"),e("li",null,"warn: 提交包含混合换行符的文件时给出警告。")],-1);function b(m,_){const i=d("ExternalLinkIcon");return o(),c("div",null,[s,e("blockquote",null,[e("p",null,[a("Reference: "),e("a",u,[a("blog"),n(i)])])]),h,e("blockquote",null,[e("p",null,[a("Reference: "),e("a",g,[a("blog"),n(i)])])]),f,p])}const x=t(r,[["render",b],["__file","index.html.vue"]]);export{x as default};
