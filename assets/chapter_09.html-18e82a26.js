const e=JSON.parse('{"key":"v-250d8710","path":"/front_end/typescript/book-learning_typescript/chapter_09.html","title":"Type Modifiers","lang":"zh-CN","frontmatter":{"date":"2022-12-16T00:00:00.000Z","category":"TypeScript","tag":["Book - Learning TypeScript","chapter 09"],"description":"Type Modifiers Top Types A top type, or universal type, is a type that can represent any possible value in a system. All types are assignable to a top type. const a: number = 1 // ok const b: any = a","head":[["meta",{"property":"og:url","content":"https://eathyn.github.io/blog/blog/front_end/typescript/book-learning_typescript/chapter_09.html"}],["meta",{"property":"og:title","content":"Type Modifiers"}],["meta",{"property":"og:description","content":"Type Modifiers Top Types A top type, or universal type, is a type that can represent any possible value in a system. All types are assignable to a top type. const a: number = 1 // ok const b: any = a"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-12T13:42:19.000Z"}],["meta",{"property":"article:tag","content":"Book - Learning TypeScript"}],["meta",{"property":"article:tag","content":"chapter 09"}],["meta",{"property":"article:published_time","content":"2022-12-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-12T13:42:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Type Modifiers\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-12T13:42:19.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Top Types","slug":"top-types","link":"#top-types","children":[{"level":3,"title":"any, Again","slug":"any-again","link":"#any-again","children":[]},{"level":3,"title":"unknown","slug":"unknown","link":"#unknown","children":[]}]},{"level":2,"title":"Type Predicates","slug":"type-predicates","link":"#type-predicates","children":[]},{"level":2,"title":"Type Operators","slug":"type-operators","link":"#type-operators","children":[{"level":3,"title":"keyof","slug":"keyof","link":"#keyof","children":[]},{"level":3,"title":"typeof","slug":"typeof","link":"#typeof","children":[]}]},{"level":2,"title":"Type Assertions","slug":"type-assertions","link":"#type-assertions","children":[{"level":3,"title":"Asserting Caught Error Types","slug":"asserting-caught-error-types","link":"#asserting-caught-error-types","children":[]},{"level":3,"title":"Non-Null Assertions","slug":"non-null-assertions","link":"#non-null-assertions","children":[]},{"level":3,"title":"Type Assertion Caveats","slug":"type-assertion-caveats","link":"#type-assertion-caveats","children":[{"level":4,"title":"Assertion assignability","slug":"assertion-assignability","link":"#assertion-assignability","children":[]}]}]},{"level":2,"title":"Const Assertions","slug":"const-assertions","link":"#const-assertions","children":[{"level":3,"title":"Literals to Primitives","slug":"literals-to-primitives","link":"#literals-to-primitives","children":[]},{"level":3,"title":"Read-Only Objects","slug":"read-only-objects","link":"#read-only-objects","children":[]}]}],"git":{"createdTime":1681306939000,"updatedTime":1681306939000,"contributors":[{"name":"Eathyn","email":"eathynzakas@gmail.com","commits":1}]},"readingTime":{"minutes":3.61,"words":1082},"filePathRelative":"front_end/typescript/book-learning_typescript/chapter_09.md","localizedDate":"2022年12月16日","excerpt":"<h1> Type Modifiers</h1>\\n<h2> Top Types</h2>\\n<ul>\\n<li>A top type, or universal type, is a type that can represent any possible value in a system.</li>\\n<li>All types are assignable to a top type.</li>\\n</ul>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">const</span> a<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span>\\n<span class=\\"token comment\\">// ok</span>\\n<span class=\\"token keyword\\">const</span> b<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">any</span> <span class=\\"token operator\\">=</span> a\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
