import{_ as o,W as l,X as n,Y as e,Z as t,$ as a,a0 as r,C as d}from"./framework-0d71bc9d.js";const s="/blog/assets/terminology-c78e27f6.png",c="/blog/assets/justify_content-92e7dc51.png",h="/blog/assets/align_items-31f68382.png",f="/blog/assets/order-9554b2ec.png",u="/blog/assets/flex_basis-4af86d7a.png",x={},p=r('<h1 id="layout-flexbox" tabindex="-1"><a class="header-anchor" href="#layout-flexbox" aria-hidden="true">#</a> Layout: Flexbox</h1><h2 id="reason" tabindex="-1"><a class="header-anchor" href="#reason" aria-hidden="true">#</a> Reason</h2><p>The Flexbox Layout module aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”).</p><h2 id="terminology" tabindex="-1"><a class="header-anchor" href="#terminology" aria-hidden="true">#</a> Terminology</h2><ul><li>main axis</li><li>main start</li><li>main end</li><li>main size</li><li>cross axis</li><li>cross start</li><li>cross end</li><li>cross size</li></ul><figure><img src="'+s+'" alt="terminology" tabindex="0" loading="lazy"><figcaption>terminology</figcaption></figure><h2 id="flex-container" tabindex="-1"><a class="header-anchor" href="#flex-container" aria-hidden="true">#</a> Flex Container</h2><h3 id="display" tabindex="-1"><a class="header-anchor" href="#display" aria-hidden="true">#</a> display</h3><p>The <code>display: flex</code> property defines a flex container.</p><h3 id="flex-direction" tabindex="-1"><a class="header-anchor" href="#flex-direction" aria-hidden="true">#</a> flex-direction</h3><p>The <code>flex-direction</code> establishes the main-axis.</p><ul><li><code>row</code> (default): left to right</li><li><code>row-reverse</code>: right to left</li><li><code>column</code>: top to bottom</li><li><code>column-reverse</code>: bottom to top</li></ul><h3 id="flex-wrap" tabindex="-1"><a class="header-anchor" href="#flex-wrap" aria-hidden="true">#</a> flex-wrap</h3><ul><li><code>nowrap</code> (default): all flex items will be on one line</li><li><code>wrap</code>: flex items will wrap onto multiple lines, from top to bottom</li><li><code>wrap-reverse</code>: flex items will wrap onto multiple lines from bottom to top</li></ul><h3 id="flex-flow" tabindex="-1"><a class="header-anchor" href="#flex-flow" aria-hidden="true">#</a> flex-flow</h3><p>A shorthand for the <code>flex-direction</code> and <code>flex-flow</code></p><h3 id="justify-content" tabindex="-1"><a class="header-anchor" href="#justify-content" aria-hidden="true">#</a> justify-content</h3><p>The <code>justify-content</code> defines the alignment along the main axis. It helps distribute extra free space leftover.</p><ul><li><code>flex-start</code> (default): items are packed toward the start of the flex-direction.</li><li><code>flex-end</code>: items are packed toward the end of the flex-direction.</li><li><code>center</code>: items are centered along the line</li><li><code>space-between</code>: items are evenly distributed in the line; first item is on the start line, last item on the end line</li><li><code>space-around</code></li><li><code>space-evenly</code>: items are distributed so that the spacing between any two items (and the space to the edges) is equal.</li></ul><figure><img src="'+c+'" alt="justify content" tabindex="0" loading="lazy"><figcaption>justify content</figcaption></figure><h3 id="align-items" tabindex="-1"><a class="header-anchor" href="#align-items" aria-hidden="true">#</a> align-items</h3><p>The <code>align-items</code> defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the <code>justify-content</code> version for the cross-axis.</p><ul><li><code>stretch</code> (default): stretch to fill the container (still respect min-width/max-width)</li><li><code>flex-start</code>: items are placed at the start of the cross axis.</li><li><code>flex-end</code>: items are placed at the end of the cross axis.</li><li><code>center</code>: items are centered in the cross-axis.</li><li><code>baseline</code>: items are aligned such as their baselines align.</li></ul><figure><img src="'+h+'" alt="align items" tabindex="0" loading="lazy"><figcaption>align items</figcaption></figure><ul><li><code>align-items: stretch</code> and <code>align-content: stretch</code> do not work when specify <code>height</code> to flex items.</li></ul><h3 id="align-content" tabindex="-1"><a class="header-anchor" href="#align-content" aria-hidden="true">#</a> align-content</h3><p>The <code>align-content</code> property aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how <code>justify-content</code> aligns individual items within the main-axis.</p><ul><li><code>flex-start</code> (default): items packed to the start of the container.</li><li><code>flex-end</code>: items packed to the end of the container.</li><li><code>center</code>: items centered in the container.</li><li><code>space-between</code>: items evenly distributed; the first line is at the start of the container while the last one is at the end.</li><li><code>space-around</code>: items evenly distributed with equal space around each line.</li><li><code>space-evently</code>: items are evenly distributed with equal space around them.</li><li><code>stretch</code>: lines stretch to take up the remaining space.</li></ul><h4 id="attentions" tabindex="-1"><a class="header-anchor" href="#attentions" aria-hidden="true">#</a> Attentions</h4><ul><li>This property only takes effect on multi-line flexible containers.</li><li><code>align-content</code> determines the spacing between lines. <code>align-items</code> determines how the items as a whole are aligned within the container.</li></ul><h3 id="gap-row-gap-column-gap" tabindex="-1"><a class="header-anchor" href="#gap-row-gap-column-gap" aria-hidden="true">#</a> gap, row-gap, column-gap</h3><ul><li><code>gap</code>: <code>row-gap</code> <code>column-gap</code></li></ul><h2 id="flex-item" tabindex="-1"><a class="header-anchor" href="#flex-item" aria-hidden="true">#</a> Flex Item</h2><h3 id="order" tabindex="-1"><a class="header-anchor" href="#order" aria-hidden="true">#</a> order</h3><ul><li>the <code>order</code> property controls the order in which they appear in the flex container.</li></ul><figure><img src="'+f+'" alt="order" tabindex="0" loading="lazy"><figcaption>order</figcaption></figure><ul><li>Items with the same order revert to source order.</li></ul><h3 id="flex-grow" tabindex="-1"><a class="header-anchor" href="#flex-grow" aria-hidden="true">#</a> flex-grow</h3><ul><li>It dictates what amount of the available space inside the flex container the item should take up.</li><li>the default value of <code>flex-grow</code> is 0.</li></ul><h3 id="flex-shrink" tabindex="-1"><a class="header-anchor" href="#flex-shrink" aria-hidden="true">#</a> flex-shrink</h3><ul><li>This defines the ability for a flex item to shrink if necessary.</li><li>the default value of <code>flex-shrink</code> is 1.</li></ul><h3 id="flex-basis" tabindex="-1"><a class="header-anchor" href="#flex-basis" aria-hidden="true">#</a> flex-basis</h3><ul><li>This defines the default size of an element before the remaining space is distributed.</li><li>The <code>auto</code> keyword means “look at my width or height property”</li><li>the default value of <code>flex-basis</code> is <code>auto</code>.</li><li>If set to 0, the extra space around content isn’t factored in. If set to auto, the extra space is distributed based on its flex-grow value.</li></ul><figure><img src="'+u+'" alt="flex-basis" tabindex="0" loading="lazy"><figcaption>flex-basis</figcaption></figure><h3 id="flex" tabindex="-1"><a class="header-anchor" href="#flex" aria-hidden="true">#</a> flex</h3><ul><li>This is the shorthand for <code>flex-grow</code>, <code>flex-shrink</code> and <code>flex-basis</code> combined.</li><li><code>flex: &lt;number&gt;</code> is equal to <code>flex: &lt;number&gt; 1 0</code></li><li><code>flex: &lt;width&gt;</code> is equal to <code>flex: 1 1 &lt;width&gt;</code></li></ul><h3 id="align-self" tabindex="-1"><a class="header-anchor" href="#align-self" aria-hidden="true">#</a> align-self</h3><p>This allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.</p><h2 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> Refs</h2>',49),m={href:"https://css-tricks.com/snippets/css/a-guide-to-flexbox/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://stackoverflow.com/a/34365843/9863318",target:"_blank",rel:"noopener noreferrer"},b={href:"https://stackoverflow.com/a/45713137/9863318",target:"_blank",rel:"noopener noreferrer"},w={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/flex",target:"_blank",rel:"noopener noreferrer"};function y(_,v){const i=d("ExternalLinkIcon");return l(),n("div",null,[p,e("ul",null,[e("li",null,[e("a",m,[t("A Complete Guide to Flexbox"),a(i)])]),e("li",null,[e("a",g,[t("Flex Items cannot Stretch"),a(i)])]),e("li",null,[e("a",b,[t("align-items vs align-content"),a(i)])]),e("li",null,[e("a",w,[t("flex: <number> vs flex: <width>"),a(i)])])])])}const T=o(x,[["render",y],["__file","index.html.vue"]]);export{T as default};
