import{_ as n,W as s,X as a,a0 as e}from"./framework-0d71bc9d.js";const p={},t=e(`<h1 id="advanced-types" tabindex="-1"><a class="header-anchor" href="#advanced-types" aria-hidden="true">#</a> Advanced Types</h1><h2 id="mapped-type" tabindex="-1"><a class="header-anchor" href="#mapped-type" aria-hidden="true">#</a> Mapped Type</h2><h3 id="definition" tabindex="-1"><a class="header-anchor" href="#definition" aria-hidden="true">#</a> Definition</h3><blockquote><p><em>Learning TypeScript</em>: p253-254</p></blockquote><ul><li>映射类型（mapped type）指的是对某个类型的所有属性进行操作后形成的新类型。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Animal</span> <span class="token operator">=</span> <span class="token string">&#39;panda&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;monkey&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;elephant&#39;</span>
<span class="token keyword">type</span> <span class="token class-name">AnimalCount</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>k <span class="token keyword">in</span> Animal<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span> <span class="token comment">// {panda: number, monkey: number, elephant: number}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><ul><li>映射类型经常与 <code>keyof</code> 搭配。<code>keyof TypeA</code> 返回 <code>&quot;a&quot; | &quot;b&quot; | &quot;c&quot;</code>。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">TypeA</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">number</span>
  b<span class="token operator">:</span> <span class="token builtin">string</span>
  c<span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TypeB</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> TypeA<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span> <span class="token comment">// {a: number, b: number, c: number}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>-readonly</code> 将属性转变为可写属性；使用 <code>-?</code> 将属性转变为必需属性。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">TypeA</span> <span class="token punctuation">{</span>
  a<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token keyword">readonly</span> b<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">TypeB</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> TypeA<span class="token punctuation">]</span><span class="token operator">:</span> TypeA<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span> <span class="token comment">// {a?: number, b: string}</span>

<span class="token keyword">type</span> <span class="token class-name">TypeC</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> TypeA<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> TypeA<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span> <span class="token comment">// {a: number, readonly b: string}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[t];function c(l,i){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","advanced-types.html.vue"]]);export{d as default};
