const n=JSON.parse(`{"key":"v-2e37c7f7","path":"/front_end/typescript/syntax/narrowing.html","title":"Narrowing","lang":"zh-CN","frontmatter":{"date":"2023-05-31T00:00:00.000Z","category":"TypeScript","description":"Narrowing 定义 窄化（narrowing）指的是将一个类型缩小为更具体的类型。例如将 any 缩小为 number。 有很多种方式可以实现窄化，例如 instanceof，typeof，truthiness，equality 等。 typeof function print(message: string | number) { if (typeof message === 'string') { console.log(message.toUpperCase()) // message: string } else { console.log(message) // message: number } }","head":[["meta",{"property":"og:url","content":"https://eathyn.github.io/blog/blog/front_end/typescript/syntax/narrowing.html"}],["meta",{"property":"og:title","content":"Narrowing"}],["meta",{"property":"og:description","content":"Narrowing 定义 窄化（narrowing）指的是将一个类型缩小为更具体的类型。例如将 any 缩小为 number。 有很多种方式可以实现窄化，例如 instanceof，typeof，truthiness，equality 等。 typeof function print(message: string | number) { if (typeof message === 'string') { console.log(message.toUpperCase()) // message: string } else { console.log(message) // message: number } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-31T09:52:13.000Z"}],["meta",{"property":"article:published_time","content":"2023-05-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-31T09:52:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Narrowing\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-31T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-31T09:52:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"typeof","slug":"typeof","link":"#typeof","children":[]},{"level":2,"title":"instanceof","slug":"instanceof","link":"#instanceof","children":[]},{"level":2,"title":"Equality Narrowing","slug":"equality-narrowing","link":"#equality-narrowing","children":[]},{"level":2,"title":"Truthiness Narrowing","slug":"truthiness-narrowing","link":"#truthiness-narrowing","children":[]},{"level":2,"title":"Type Predicate","slug":"type-predicate","link":"#type-predicate","children":[]}],"git":{"createdTime":1685526733000,"updatedTime":1685526733000,"contributors":[{"name":"Eathyn","email":"eathynzakas@gmail.com","commits":1}]},"readingTime":{"minutes":0.99,"words":298},"filePathRelative":"front_end/typescript/syntax/narrowing.md","localizedDate":"2023年5月31日","excerpt":"<h1> Narrowing</h1>\\n<h2> 定义</h2>\\n<ul>\\n<li>\\n<p>窄化（narrowing）指的是将一个类型缩小为更具体的类型。例如将 <code>any</code> 缩小为 <code>number</code>。</p>\\n</li>\\n<li>\\n<p>有很多种方式可以实现窄化，例如 <code>instanceof</code>，<code>typeof</code>，<code>truthiness</code>，<code>equality</code> 等。</p>\\n</li>\\n</ul>\\n<h2> typeof</h2>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span>message<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">|</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span> message <span class=\\"token operator\\">===</span> <span class=\\"token string\\">'string'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>message<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">toUpperCase</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// message: string</span>\\n  <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>message<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// message: number</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
