import{_ as e,W as o,X as c,a0 as t}from"./framework-0d71bc9d.js";const i="/blog/assets/example-before-revert-5ea9ae9e.png",r="/blog/assets/example-after-revert-abefaac5.png",d="/blog/assets/reset-vs-revert-d141b5f9.png",a={},l=t('<h1 id="revert" tabindex="-1"><a class="header-anchor" href="#revert" aria-hidden="true">#</a> Revert</h1><blockquote><p>Reference:</p><ul><li>Git for Teams : p137-138</li><li>Professional Git : p147-150</li></ul></blockquote><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><ul><li><code>git revert &lt;commit&gt;</code>：自动新建一个 commit，这个 commit 不包含指定 commit 的提交内容，包含指定 commit 的前面和后面的所有 commit 的提交内容。</li></ul><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><ul><li><code>commit-1</code> 在文件中写入 <code>hi world</code>；<code>commit-2</code> 在文件中写入 <code>hello word</code>；<code>commit-3</code> 在文件中写入 <code>你好世界</code>。如下图所示：</li></ul><figure><img src="'+i+'" alt="执行 revert 之前" tabindex="0" loading="lazy"><figcaption>执行 revert 之前</figcaption></figure><ul><li>使用 <code>git revert commit-2</code> 将 <code>hello word</code> 改为 <code>hello world</code>。Git 自动创建 <code>commit-4</code>，这个 commit 包含 <code>commit-1</code> 和 <code>commit-3</code>，不包含 <code>commit-2</code>。如下图所示：</li></ul><figure><img src="'+r+'" alt="执行 revert 之后" tabindex="0" loading="lazy"><figcaption>执行 revert 之后</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><code>revert</code> 会创建一个新的 commit。</li><li><code>revert</code> 会保留该 commit 前面和后面的所有 commit。</li></ul></div><h2 id="revert-vs-reset" tabindex="-1"><a class="header-anchor" href="#revert-vs-reset" aria-hidden="true">#</a> revert vs reset</h2><ul><li><code>reset commit-2</code> 不会保留 <code>commit-2</code> 之后的提交（即 <code>commit-3</code>）；<code>revert commit-2</code> 会保留 <code>commit-2</code> 之后的提交（即 <code>commit-3</code>）。</li><li><code>reset</code> 不会创建新的 commit；<code>revert</code> 会创建新的 commit（即 <code>commit-4</code>）。</li></ul><figure><img src="'+d+'" alt="reset vs revert" tabindex="0" loading="lazy"><figcaption>reset vs revert</figcaption></figure><div class="hint-container danger"><p class="hint-container-title">警告</p><p>如果要回滚的 commit 已经推送到远程仓库，则应该使用 <code>revert</code>。如果使用 <code>reset</code> 后续需要强制推送到远程仓库，强制推送的可能会造成以下问题：</p><ul><li>而且强制推送存在一定的危险性。</li><li>团队成员在拉取代码时需要进行一次合并。</li><li>团队成员的本地环境还存在着你不想要的提交（即位于 <code>B</code> 之后的那些 commit），这些提交会被推送到远程仓库，下次你拉取代码时还会出现。</li></ul></div>',14),m=[l];function s(n,h){return o(),c("div",null,m)}const u=e(a,[["render",s],["__file","index.html.vue"]]);export{u as default};
